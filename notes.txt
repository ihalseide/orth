= Programming Notes =

* Raspberry Pi JonesFORTH O/S
https://github.com/organix/pijFORTHos

* Baking Pi
https://www.cl.cam.ac.uk/projects/raspberrypi/tutorials/os/

* Kernel, Raspberry pi boot, atags
http://www.simtec.co.uk/products/SWLINUX/files/booting_article.html#appendix_tag_reference

* Programming embedded Raspbery Pi
https://www.studica.com/blog/program-embedded-systems-raspberry-pi

* ThinkGeek Raspberry Pi Assembly
https://thinkingeek.com/arm-assembler-raspberry-pi/

* Building an Operating System for the Raspberry Pi
https://jsandler18.github.io

* Hackaday roll you own raspberry pi os
https://hackaday.com/2018/01/19/roll-your-own-raspberry-pi-os/

* Introduction to Computer Organization: ARM Assembly Language Using the Raspberry Pi
http://bob.cs.sonoma.edu/IntroCompOrg-RPi/intro-co-rpi.html

* TWO KINDS OF BOOTSTRAPPING
https://lispcast.com/two-kinds-of-bootstrapping/

* ARM Cross-compiler GNU
https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads

* OsDev.org
https://wiki.osdev.org

* XMODEM kernel boot file transfer
https://en.wikipedia.org/wiki/XMODEM

* Jonesforth-ARM
https://github.com/M2IHP13-admin/JonesForth-arm

* Jonesforth Arm
https://github.com/phf/forth 

* JONESFORTH/arm: Porting Richard Jones' FORTH to ARM
https://github.com/phf/forth

* Operating System Book List
https://wiki.osdev.org/Books

* Threaded code
https://www.complang.tuwien.ac.at/forth/threaded-code.html

== Programming Languages ==

* Concatenative language/Meta-programming
https://concatenative.org/wiki/view/Concatenative%20language/Meta-programming 

* Concatenative language/Meta-programming
https://concatenative.org/wiki/view/Concatenative%20language/Meta-programming 

* A prefix notation programming language · Probably Programming
http://probablyprogramming.com/2008/11/16/a-prefix-notation-programming-language 

* 8th 1.1.1 released - supports Raspberry Pi
8th is a Forth-derived language, whose goal is to enable cross-platform application development.
It is a hosted Forth, and runs on Windows, Linux, OS X, iOS, Android and now RPI: 
http://8th-dev.com/forum/index.php/topic,485.0.html

* Factor programming language
https://www.factorcode.org/ 

* Introduction to arm assembly
http://www.davespace.co.uk/arm/introduction-to-arm/

* Where the ARM chip comes from, history
https://heyrick.eu/assembler/history.html

* ARM assembler old website
https://heyrick.eu/assembler/

* FASMARM flat assembler
https://arm.flatassembler.net

* ARM's official website
https://www.arm.com
https://developer.arm.com/develop-software

* Keystone Assembler
https://www.keystone-engine.org

* How to Write a Lisp Interpreter in Python
https://norvig.com/lispy.html

* Maxwell's Equations of software
http://www.righto.com/2008/07/maxwells-equations-of-software-examined.html

* Little Lisp interpreter - Blog - Recurse Center
https://www.recurse.com/blog/21-little-lisp-interpreter 

* brainfuck interpreter - mitxela.com
https://mitxela.com/other/brainfuck 

* MoonScript, a language that compiles to Lua
https://moonscript.org/ 

* The Fennel programming language
https://fennel-lang.org/ 

* On Lisp : advanced techniques for Common Lisp (Book, 1994) [WorldCat.org]
https://www.worldcat.org/title/on-lisp-advanced-techniques-for-common-lisp/oclc/28339863 

* Kilo LISP - T3X.ORG
https://www.t3x.org/klisp/index.html 

* uLisp
http://www.ulisp.com/show?3J 

* LLVM - Wikipedia
https://en.wikipedia.org/wiki/LLVM 

* Mathematicians Discover the Perfect Way to Multiply
https://www.quantamagazine.org/mathematicians-discover-the-perfect-way-to-multiply-20190411/ 

* Learn C • Build Your Own Lisp
http://buildyourownlisp.com/ 

* Create a minimal Lisp interpreter in C
http://leohetsch.com/create-a-minimal-lisp-like-interpreter-in-c/ 

* Make Your Own Lisp Interpreter in 10 Incremental Steps
http://kanaka.github.io/lambdaconf/#/ 

* An Even Better Lisp Interpreter in Python
http://norvig.com/lispy2.html 

* Structure and Interpretation of Computer Programs
https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-4.html 

* Nim (programming language) - Wikipedia
https://en.wikipedia.org/wiki/Nim_%28programming_language%29 

* Structure and Interpretation of Computer Programs
https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html 

* Let’s Build A Simple Interpreter. Part 1. - Ruslan's Blog
https://ruslanspivak.com/lsbasi-part1/ 

* Let's Build a Compiler
https://compilers.iecc.com/crenshaw/ 

* nano-jfp.pdf
https://legacy.cs.indiana.edu/~dyb/pubs/nano-jfp.pdf 

* Esolang, the esoteric programming languages wiki
https://esolangs.org/wiki/Main_Page 

* Anyfix notation - Esolang
https://esolangs.org/wiki/Anyfix_notation 

* 6502 Assembly - Wikibooks, open books for an open world
https://en.wikibooks.org/wiki/6502_Assembly 

* NASM netwide assembler
https://www.nasm.us/ 

* Hello World with NASM Assembler - DevDungeon
https://www.devdungeon.com/content/hello-world-nasm-assembler  
* Readable Lisp S-expressions download
https://sourceforge.net/projects/readable/  

* PicoLisp Wiki
https://picolisp.com/wiki/?home 

* Radical.pdf
https://software-lab.de/radical.pdf 

* picolisp
https://github.com/picolisp/picolisp 

* Forth (programming language) - Wikipedia
https://en.wikipedia.org/wiki/Forth_(programming_language) 

* Concatenative language/Meta-programming
https://concatenative.org/wiki/view/Concatenative%20language/Meta-programming 

* Forth: The Hacker’s Language - Hackaday
https://hackaday.com/2017/01/27/forth-the-hackers-language/   
* Data and the Forth Stack
https://www.forth.com/starting-forth/
https://www.forth.com/starting-forth/1-forth-stacks-dictionary/ 

* nornagon/jonesforth: Mirror of JONESFORTH
https://github.com/nornagon/jonesforth 

* A prefix notation programming language · Probably Programming
http://probablyprogramming.com/2008/11/16/a-prefix-notation-programming-language 

* Th - Esolang
https://esolangs.org/wiki/Th 

* Mov - Esolang
https://esolangs.org/wiki/Mov 

* Factor programming language
https://factorcode.org/ 

* Kitten Programming Language
https://kittenlang.org/ 
https://github.com/evincarofautumn/kitten

* Forth Tutorial (Part 1)
https://blog.asrpo.com/forth_tutorial_part_1 

* Om: Main Page
https://www.om-language.org/ 

* Why concatenative programming matters
http://evincarofautumn.blogspot.com/2012/02/why-concatenative-programming-matters.html

* Cat Programming Language
https://github.com/cdiggins/cat-language

* Freelang
https://concatenative.org/wiki/view/Freelang 

* A Beginner's Guide to Forth
http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm 

* Jonesforth
http://git.annexia.org/?p=jonesforth.git;a=blob_plain;f=jonesforth.S;hb=HEAD 

* Om: Main Page
https://www.om-language.org/index.html 

* Concatenative.org Front Page
https://www.concatenative.org/wiki/view/Front%20Page 

* Chuck Moore's colorForth, OKAD and S40 Forth Multicomputer chip
https://colorforth.github.io/index.html 

* The Theory of Concatenative Combinators
http://tunes.org/~iepos/joy.html

* The Theory of Concatenative Combinators
http://www.enchiladacode.nl

* kanaka/mal - Make a Lisp
https://github.com/kanaka/mal 

* Max Bernstein - Lisp implementations
https://bernsteinbear.com/blog/lisp/ 

* Building LISP
https://www.lwh.jp/lisp/ 

* Lisp In Less Than 200 Lines Of C
https://carld.github.io/2017/06/20/lisp-in-less-than-200-lines-of-c.html 

* The Roots of Lisp
http://www.paulgraham.com/rootsoflisp.html
http://languagelog.ldc.upenn.edu/myl/ldc/llog/jmc.pdf

* carld/micro-lisp
https://github.com/carld/micro-lisp 

* John McCarthy
http://www-formal.stanford.edu/jmc/ 

* Reverse Polish notation
https://enacademic.com/dic.nsf/enwiki/16282 

* Femtolisp
https://github.com/JeffBezanson/femtolisp 

* Lisp in Small Pieces by Christian Queinnec
https://play.google.com/store/books/details/Christian_Queinnec_Lisp_in_Small_Pieces?id=tgkhAwAAQBAJ 

* Forth Lessons
http://wiki.laptop.org/go/Forth_Lessons 

* Forth
http://www.albany.net/~hello/simple.htm 

* Why Forth?
http://www.jwdt.com/~paysan/why-forth.html 

* Forth Discussion
http://lambda-the-ultimate.org/node/2452 

* Artic Software (Forth)	
http://en.wikipedia.org/wiki/Artic_Software 

* eForth Overview
http://www.exemark.com/FORTH/eForthOverviewv5.pdf 

* What Are the Primitive Forth Operators - Stack Overflow
https://stackoverflow.com/questions/407987/what-are-the-primitive-forth-operators 

* Forth Thread
http://newsgroups.derkeiler.com/Archive/Comp/comp.lang.forth/2005-09/msg00337.html

* Peano Axioms
https://en.wikipedia.org/wiki/Peano_axioms 

* 4tH Compiler
https://thebeez.home.xs4all.nl/4tH/ 

* A 3-INSTRUCTION FORTH FOR EMBEDDED SYSTEMS WORK
http://pygmy.utoh.org/3ins4th.html

* Starting Forth
http://home.iae.nl/users/mhx/sf.html

* Forth Standard
https://forth-standard.org

* Forth – Esolangs.org
https://esolangs.org/wiki/Forth

* Laws of Computing
https://wiki.forth-ev.de/lib/exe/fetch.php/projects:laws_of_computing_pages_10_v5.pdf

* FIG Forth Implementation
http://www.forth.org/fig-forth/contents.html

* FIG-FORTH Internals
http://www.jimbrooks.org/archive/programming/forth/FIG-FORTH_internals.php

* ciForth
https://home.hccnet.nl/a.w.m.van.der.horst/ciforth.html

* Lina Forth
https://home.hccnet.nl/a.w.m.van.der.horst/lina.html

* List of Lisps
https://en.wikipedia.org/wiki/List_of_Lisp-family_programming_languages

* LISP—NOTES ON ITS PAST AND FUTURE—1980
http://jmc.stanford.edu/articles/lisp20th/lisp20th.pdf

* Common Lisp the Language
https://www.cs.cmu.edu/Groups/AI/html/cltl/cltl2.html

* Corman Lisp
https://github.com/sharplispers/cormanlisp

* Seeking a Special Forth
https://groups.google.com/g/comp.lang.forth/c/KHw28PKZXUk/m/JrXcjrYshxAJ

* Lisp and Haskell
https://crypto.stanford.edu/~blynn/lambda/lisp.html

* Algebraic Terraforming: Trees from Magma
https://www.schoolofhaskell.com/user/bss/magma-tree

* The Off-side Rule
https://en.wikipedia.org/wiki/Off-side_rule

* Haskell Fan Site
https://crypto.stanford.edu/~blynn/haskell/

* TXR Lisp
https://www.nongnu.org/txr/txr-lisp.html

* Lisp-2
https://en.wikipedia.org/wiki/LISP_2

* ANSI Common Lisp
https://7chan.org/pr/src/ANSI_Common_Lisp_-_Paul_Graham.pdf

* Lisp and Haskell
https://markkarpov.com/post/lisp-and-haskell.html

* Racket Programming Language
https://racket-lang.org

* Hy Programming Language
https://docs.hylang.org/en/stable/index.html

* Goto++
https://www.gotopp.org/index.en.html

* FALSE Programming Language
https://esolangs.org/wiki/FALSE

* Business Comparison of C and Assembly
https://barrgroup.com/embedded-systems/how-to/assembly-vs-c-comparison

* Taygeta collection on Forth
https://www.taygeta.com/forth.html

* Forth Internals
http://www.jimbrooks.org/archive/programming/forth/FIG-FORTH_internals.php

* GNU Forth gforth
https://www.gnu.org/software/gforth/

* rjungemann/lbForth.c
https://gist.github.com/rjungemann/1a049a7c4bf70162c13168856e49ddb5

* Online Disassembler
https://onlinedisassembler.com/static/home/index.html

* Jonesforth-ARM
https://github.com/M2IHP13-admin/JonesForth-arm

* First Third and Forth
http://ftp.funet.fi/pub/doc/IOCCC/1992/buzzard.2.design

* PYCON UK 2017: What I learned building Forth in 64 bit Intel assembly
https://www.youtube.com/watch?v=iZ-5rBQS_p4&list=WL&index=2
Threaded Interpreted Languages / Loeliger 
Anjana Vakil Python bytecodes
Forth programmer's handbook
Chuck Moore the early years

* David Jones (maybe of Jonesforth?)
https://github.com/drj11

* Forth - The New Synthesis Growing Forth with preForth and seedForth
https://www.youtube.com/watch?v=5vYUTQAfzr4&list=WL&index=3
Take away until the minimum is left to achieve perfection

* Bitwise, Day 35: Implementing Forth
https://youtu.be/rlayTh3sjiw

* OKF
https://github.com/larsbrinkhoff/okf
A 32-bit x86 subroutine-threaded Forth whose core fits in 1KB

* Forth Documents
https://github.com/larsbrinkhoff/forth-documents

* nybbleForth - Stack machine with 4-bit instructions
https://github.com/larsbrinkhoff/nybbleForth

* lbForth Forth Implementation
https://github.com/larsbrinkhoff/lbForth
Self-hosting metacompiled Forth, bootstrapping from a few lines of C; targets Linux, Windows, ARM, RISC-V, 68000, PDP-11, asm.js.

* JONESFORTH/arm: Porting Richard Jones' FORTH to ARM
https://github.com/phf/forth
phf/forth

* Corman Lisp
This is the open-source source release of Corman Lisp. The canonical home of this release is
https://github.com/sharplispers/cormanlisp

* JeffBezanson/femtolisp
https://github.com/JeffBezanson/femtolisp
a lightweight, robust, scheme-like lisp implementation

* HSFORTH
https://duckduckgo.com/?q="HSFORTH"

* ANS Forth standard
http://lars.nocrew.org/dpans/dpans.htm

* cmForth (Chuck Moore Forth)
https://github.com/ForthHub/cmFORTH/blob/master/cmforth.fth
http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm
Ok prompt flow chart

* Retro Forth
http://forthworks.com/retro/book.htmlt

== Programming Books ==

* Assemblers and Loaders / David Salomon

* Computer Architecture: A Quantitative Approach / John L. Hennessy and David A. Patterson

* Computer Systems: A Programmer's Perspective / Randal E. Bryant and David R. O'Hallaron

* Structured Computer Organization / Andrew S. Tanenbaum and Todd Austin

* The Indispensable PC Hardware Book / Hans-Peter Messmer

* USB: The Univeral Serial Bus / Benjamin David Lunt

* Windows Internals / Mark Russinovich, David A. Solomon, and Alex Ionescu (Multi-part series)

== Forth links ==

* The Heart of Forth
http://www.figuk.plus.com/build/heart.htm

* Forth inspired programming language for the ESP8266
https://github.com/zeroflag/punyforth

* Small forth Interpreter in C
https://github.com/howerj/libforth

* Python forth assembly blog
http://blog.asrpo.com/forth_tutorial_part_1

Some blog that I heard about
(Good!! Criticizes and upholds forth for what it's worth)
https://yosefk.com/blog/my-history-with-forth-stack-machines.html

Online Book - Stack computers: the new wave
http://users.ece.cmu.edu/~koopman/stack_computers/index.html

Forth Standard website
https://forth-standard.org
https://forth-standard.org/systems - has a list of implementations

ForthHub Systems on github - list of systems and implementations
https://github.com/ForthHub/wiki/wiki/Forth-Systems

The Forth Net - website
https://github.com/ForthHub/wiki/wiki/Forth-Systems

Forth Interest Group
http://www.forth.org

Forth (programming language) - Wikipedia
https://en.wikipedia.org/wiki/Forth_(programming_language) 

Data and the Forth Stack
https://www.forth.com/starting-forth/
https://www.forth.com/starting-forth/1-forth-stacks-dictionary/ 

nornagon/jonesforth: Mirror of JONESFORTH
https://github.com/nornagon/jonesforth 

A prefix notation programming language · Probably Programming
http://probablyprogramming.com/2008/11/16/a-prefix-notation-programming-language 

Forth (programming language) - Wikipedia
https://en.wikipedia.org/wiki/Forth_(programming_language) 

Forth: The Hacker’s Language - Hackaday
https://hackaday.com/2017/01/27/forth-the-hackers-language/   

Forth Tutorial (Part 1)
https://blog.asrpo.com/forth_tutorial_part_1 

Forth: The Hacker’s Language - Hackaday
https://hackaday.com/2017/01/27/forth-the-hackers-language/   

Data and the Forth Stack
https://www.forth.com/starting-forth/
https://www.forth.com/starting-forth/1-forth-stacks-dictionary/ 

nornagon/jonesforth: Mirror of JONESFORTH
https://github.com/nornagon/jonesforth 

A Beginner's Guide to Forth
http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm 

Jonesforth
http://git.annexia.org/?p=jonesforth.git;a=blob_plain;f=jonesforth.S;hb=HEAD 

Chuck Moore's colorForth, OKAD and S40 Forth Multicomputer chip
https://colorforth.github.io/index.html 

Forth
http://www.albany.net/~hello/simple.htm 

Why Forth?
http://www.jwdt.com/~paysan/why-forth.html 

Forth Discussion
http://lambda-the-ultimate.org/node/2452 

Artic Software (Forth)	
http://en.wikipedia.org/wiki/Artic_Software 

eForth Overview
http://www.exemark.com/FORTH/eForthOverviewv5.pdf 

Forth Thread
http://newsgroups.derkeiler.com/Archive/Comp/comp.lang.forth/2005-09/msg00337.html

A 3-INSTRUCTION FORTH FOR EMBEDDED SYSTEMS WORK
http://pygmy.utoh.org/3ins4th.html

Starting Forth
http://home.iae.nl/users/mhx/sf.html

Forth Standard
https://forth-standard.org

Forth – Esolangs.org
https://esolangs.org/wiki/Forth

Simple Forth
http://www.murphywong.net/hello/simple.htm

Laws of Computing
https://wiki.forth-ev.de/lib/exe/fetch.php/projects:laws_of_computing_pages_10_v5.pdf

FIG Forth Implementation
http://www.forth.org/fig-forth/contents.html

FIG-FORTH Internals
http://www.jimbrooks.org/archive/programming/forth/FIG-FORTH_internals.php

ciForth
https://home.hccnet.nl/a.w.m.van.der.horst/ciforth.html

Lina Forth
https://home.hccnet.nl/a.w.m.van.der.horst/lina.html

Seeking a Special Forth
https://groups.google.com/g/comp.lang.forth/c/KHw28PKZXUk/m/JrXcjrYshxAJ

Taygeta collection on Forth
https://www.taygeta.com/forth.html

Forth Internals
http://www.jimbrooks.org/archive/programming/forth/FIG-FORTH_internals.php

GNU Forth gforth
https://www.gnu.org/software/gforth/

rjungemann/lbForth.c
https://gist.github.com/rjungemann/1a049a7c4bf70162c13168856e49ddb5

First Third and Forth
http://ftp.funet.fi/pub/doc/IOCCC/1992/buzzard.2.design

PYCON UK 2017: What I learned building Forth in 64 bit Intel assembly
https://www.youtube.com/watch?v=iZ-5rBQS_p4&list=WL&index=2
Threaded Interpreted Languages / Loeliger 
Anjana Vakil Python bytecodes
Forth programmer's handbook
Chuck Moore the early years

David Jones (maybe of Jonesforth?)
https://github.com/drj11

Forth - The New Synthesis Growing Forth with preForth and seedForth
https://www.youtube.com/watch?v=5vYUTQAfzr4&list=WL&index=3
Take away until the minimum is left to achieve perfection

Bitwise, Day 35: Implementing Forth
https://youtu.be/rlayTh3sjiw

OKF
https://github.com/larsbrinkhoff/okf
A 32-bit x86 subroutine-threaded Forth whose core fits in 1KB

Forth Documents
Forth douments, books, papers
larsbrinkhoff/forth-documents
https://github.com/larsbrinkhoff/forth-documents

nybbleForth
larsbrinkhoff/nybbleForth
Stack machine with 4-bit instructions
https://github.com/larsbrinkhoff/nybbleForth

lbForth Forth Implementation
larsbrinkhoff/lbForth
https://github.com/larsbrinkhoff/lbForth
Self-hosting metacompiled Forth, bootstrapping from a few lines of C; targets Linux, Windows, ARM, RISC-V, 68000, PDP-11, asm.js.

ANS Forth standard
http://lars.nocrew.org/dpans/dpans.htm


cmForth (Chuck Moore Forth)
Ok prompt flow chart
https://github.com/ForthHub/cmFORTH/blob/master/cmforth.fth
http://galileo.phys.virginia.edu/classes/551.jvn.fall01/primer.htm

Retro Forth
http://forthworks.com/retro/book.htmlt

Forth Operating System
http://www.forth.org/svfig/osf.html

== Arm assembly notes ==

Conditional instruction code modifiers:
 eq: zero set
 ne: zero not set
 cs: carry set
 cc: carry not set
 mi: negative set
 pl: negative not set
 vs: overflow set
 vc: overflow not set
 hi: carry set and zero not set
 ls: carry not set and zero set
 ge: negative set == overflow set
 lt: negative set != overflow set
 gt: zero not set and negative set == overflow set
 gt: zero set or negative set == overflow set

* Difference between TST instruction and CMP instruction?
TST = bitwise and
CMP = subtract

* difference between .balign and .align
Align to 2^N or align to N.

* PUSH AND POP
push {r0} <==> str r0, [sp, #-4]!  decrement before  
pop  {r0} <==> ldr r0, [sp], #4    increment after   
"STR{type}{cond} Rt, [Rn, #offset]! ; pre-indexed"
"LDR{type}{cond} Rt, [Rn], #offset  ; post-indexed"

