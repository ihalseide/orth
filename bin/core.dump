
core:     file format elf32-littlearm

Contents of section .text:
 8074 84810000 00000000 84810000 00000000  ................
 8084 84810000 00000000 84810000 81120100  ................
 8094 84810000 0a000000 84810000 f08c0000  ................
 80a4 b0810000 00120100 000000ea b4800000  ................
 80b4 94b59fe5 90d59fe5 90159fe5 000020e0  .............. .
 80c4 000081e5 48004fe2 000090e5 58104fe2  ....H.O.....X.O.
 80d4 000081e5 78a59fe5 ffffffea 04809ae4  ....x...........
 80e4 008098e5 18ff2fe1 f0800000 bc810000  ....../.........
 80f4 ffffffff 74800000 1c830000 38810000  ....t.......8...
 8104 94810000 04a02be5 04a080e2 f2ffffea  ......+.........
 8114 08810000 bc810000 64830000 cc810000  ........d.......
 8124 bc810000 00000000 74800000 1c830000  ........t.......
 8134 64830000 08810000 8c800000 30830000  d...........0...
 8144 9c800000 30830000 cc810000 9c800000  ....0...........
 8154 1c830000 bc810000 20000000 54840000  ........ ...T...
 8164 b0830000 64820000 8c800000 1c830000  ....d...........
 8174 bc810000 00000000 cc810000 94810000  ................
 8184 04902de5 0890a0e1 049089e2 d2ffffea  ..-.............
 8194 98810000 bc849fe5 008098e5 08810000  ................
 81a4 38810000 cc810000 94810000 04902de5  8.............-.
 81b4 049098e5 c8ffffea c0810000 04902de5  ..............-.
 81c4 04909ae4 c4ffffea d0810000 88849fe5  ................
 81d4 0870a0e1 049088e4 008087e5 04909de4  .p..............
 81e4 bdffffea ec810000 04909de4 baffffea  ................
 81f4 f8810000 04009de4 04902de5 0090a0e1  ..........-.....
 8204 b5ffffea 0c820000 04902de5 b2ffffea  ..........-.....
 8214 18820000 00009de5 04902de5 0090a0e1  ..........-.....
 8224 adffffea 2c820000 04009de4 04109de4  ....,...........
 8234 04002de5 04902de5 0190a0e1 a6ffffea  ..-...-.........
 8244 48820000 04902be5 04909de4 a2ffffea  H.....+.........
 8254 58820000 04902de5 04909be4 9effffea  X.....-.........
 8264 68820000 04009de4 099080e0 9affffea  h...............
 8274 78820000 04009de4 019049e0 96ffffea  x.........I.....
 8284 88820000 04009de4 0910a0e1 900109e0  ................
 8294 91ffffea 9c820000 04009de4 000059e1  ..............Y.
 82a4 0090e003 0090a013 8bffffea b4820000  ................
 82b4 04009de4 000059e1 0090e0b3 0090a0a3  ......Y.........
 82c4 85ffffea cc820000 04009de4 000059e1  ..............Y.
 82d4 0090e0a3 0090a0b3 7fffffea e4820000  ................
 82e4 04009de4 009009e0 7bffffea f4820000  ........{.......
 82f4 04009de4 009089e1 77ffffea 04830000  ........w.......
 8304 04009de4 009029e0 73ffffea 14830000  ......).s.......
 8314 0990e0e1 70ffffea 20830000 04009de4  ....p... .......
 8324 000089e5 04909de4 6bffffea 34830000  ........k...4...
 8334 009099e5 68ffffea 40830000 04009de4  ....h...@.......
 8344 0000c9e5 04909de4 63ffffea 54830000  ........c...T...
 8354 0000a0e3 0000d9e5 04909de4 5effffea  ............^...
 8364 68830000 04a09be4 5bffffea 74830000  h.......[...t...
 8374 00109ae5 01a0a0e1 57ffffea 84830000  ........W.......
 8384 04009de4 000050e3 00109a05 01a0a001  ......P.........
 8394 04a08a12 50ffffea a0830000 0900a0e1  ....P...........
 83a4 04909de4 000090e5 10ff2fe1 b4830000  ........../.....
 83b4 0900a0e1 010080e2 04002de5 009099e5  ..........-.....
 83c4 3f9009e2 44ffffea d0830000 04009de4  ?...D...........
 83d4 04109de4 04209de4 80429fe5 004094e5  ..... ...B...@..
 83e4 000059e3 1300000a 0130d0e4 610053e3  ..Y......0..a.S.
 83f4 000000ba 203043e2 3a0053e3 020000ba  .... 0C.:.S.....
 8404 410053e3 0c0000ba 073043e2 303043e2  A.S......0C.00C.
 8414 040053e1 080000aa 910405e0 0510a0e1  ..S.............
 8424 920405e0 0520a0e1 032082e0 019089e2  ..... ... ......
 8434 010040e2 e9ffffea 04202de5 04102de5  ..@...... -...-.
 8444 04002de5 24ffffea 50840000 22ffffea  ..-.$...P..."...
 8454 58840000 00029fe5 000090e5 0040a0e1  X............@..
 8464 fc119fe5 001091e5 0120a0e1 f4319fe5  ......... ...1..
 8474 003093e5 031081e0 ec319fe5 003093e5  .0.......1...0..
 8484 032082e0 010052e1 0b00000a 0030d1e5  . ....R......0..
 8494 011081e2 090053e1 f9ffff0a 010080e2  ......S.........
 84a4 0030c0e5 010052e1 0300000a 0030d1e5  .0....R......0..
 84b4 011081e2 090053e1 f7ffff1a 2030a0e3  ......S..... 0..
 84c4 0130c1e5 010040e0 0000c4e5 90019fe5  .0....@.........
 84d4 000090e5 001041e0 88019fe5 001080e5  ......A.........
 84e4 0490a0e1 fcfeffea 58840000 0900a0e1  ........X.......
 84f4 080000eb 04909de4 f7feffea 0370a0e3  .............p..
 8504 0000a0e3 64119fe5 0120a0e3 000000ef  ....d.... ......
 8514 000090e5 1eff2fe1 ff0000e2 4c119fe5  ....../.....L...
 8524 000081e5 0470a0e3 0100a0e3 3c119fe5  .....p......<...
 8534 0120a0e3 000000ef 1eff2fe1 44850000  . ......../.D...
 8544 08810000 84800000 30830000 7c800000  ........0...|...
 8554 30830000 98820000 80830000 8c850000  0...............
 8564 a4800000 bc810000 32000000 4c840000  ........2...L...
 8574 84800000 1c830000 bc810000 00000000  ................
 8584 7c800000 1c830000 bc810000 20000000  |........... ...
 8594 54840000 40850000 08820000 80830000  T...@...........
 85a4 d4850000 74800000 30830000 98820000  ....t...0.......
 85b4 80830000 c8850000 cc810000 70830000  ............p...
 85c4 48860000 9c830000 70830000 48860000  H.......p...H...
 85d4 08820000 28820000 b0830000 cc830000  ....(...........
 85e4 80830000 20860000 74800000 30830000  .... ...t...0...
 85f4 80830000 1c860000 9c800000 30830000  ............0...
 8604 08820000 30830000 9c800000 1c830000  ....0...........
 8614 8c800000 1c830000 b0800000 e8810000  ................
 8624 e8810000 74800000 30830000 80830000  ....t...0.......
 8634 48860000 bc810000 bc810000 cc810000  H...............
 8644 cc810000 70830000 44850000 00110100  ....p...D.......
 8654 78800000 44850000 a0800000 90800000  x...D...........
 8664 98800000 a8800000 80800000 88800000  ................
 8674 80120100                             ....            
Contents of section .rodata:
 8678 00000000 05737461 74650000 00000000  .....state......
 8688 00000000 00000000 00000000 00000000  ................
 8698 00000000 78860000 033e696e 00000000  ....x....>in....
 86a8 00000000 00000000 00000000 00000000  ................
 86b8 00000000 00000000 9c860000 04237469  .............#ti
 86c8 62000000 00000000 00000000 00000000  b...............
 86d8 00000000 00000000 00000000 c0860000  ................
 86e8 02647000 00000000 00000000 00000000  .dp.............
 86f8 00000000 00000000 00000000 00000000  ................
 8708 e4860000 04626173 65000000 00000000  .....base.......
 8718 00000000 00000000 00000000 00000000  ................
 8728 00000000 08870000 046c6173 74000000  .........last...
 8738 00000000 00000000 00000000 00000000  ................
 8748 00000000 00000000 2c870000 03746962  ........,....tib
 8758 00000000 00000000 00000000 00000000  ................
 8768 00000000 00000000 00000000 50870000  ............P...
 8778 04717569 74000000 00000000 00000000  .quit...........
 8788 00000000 00000000 00000000 00000000  ................
 8798 74870000 813a0000 00000000 00000000  t....:..........
 87a8 00000000 00000000 00000000 00000000  ................
 87b8 00000000 98870000 813b0000 00000000  .........;......
 87c8 00000000 00000000 00000000 00000000  ................
 87d8 00000000 00000000 bc870000 06637265  .............cre
 87e8 61746500 00000000 00000000 00000000  ate.............
 87f8 00000000 00000000 00000000 e0870000  ................
 8808 07283b63 6f646529 00000000 00000000  .(;code)........
 8818 00000000 00000000 00000000 00000000  ................
 8828 04880000 05636f6e 73740000 00000000  .....const......
 8838 00000000 00000000 00000000 00000000  ................
 8848 00000000 28880000 836c6974 00000000  ....(....lit....
 8858 00000000 00000000 00000000 00000000  ................
 8868 00000000 00000000 4c880000 012c0000  ........L....,..
 8878 00000000 00000000 00000000 00000000  ................
 8888 00000000 00000000 00000000 70880000  ............p...
 8898 0464726f 70000000 00000000 00000000  .drop...........
 88a8 00000000 00000000 00000000 00000000  ................
 88b8 94880000 04737761 70000000 00000000  .....swap.......
 88c8 00000000 00000000 00000000 00000000  ................
 88d8 00000000 b8880000 03647570 00000000  .........dup....
 88e8 00000000 00000000 00000000 00000000  ................
 88f8 00000000 00000000 dc880000 046f7665  .............ove
 8908 72000000 00000000 00000000 00000000  r...............
 8918 00000000 00000000 00000000 00890000  ................
 8928 03726f74 00000000 00000000 00000000  .rot............
 8938 00000000 00000000 00000000 00000000  ................
 8948 24890000 023e5200 00000000 00000000  $....>R.........
 8958 00000000 00000000 00000000 00000000  ................
 8968 00000000 48890000 02523e00 00000000  ....H....R>.....
 8978 00000000 00000000 00000000 00000000  ................
 8988 00000000 00000000 6c890000 012b0000  ........l....+..
 8998 00000000 00000000 00000000 00000000  ................
 89a8 00000000 00000000 00000000 90890000  ................
 89b8 012d0000 00000000 00000000 00000000  .-..............
 89c8 00000000 00000000 00000000 00000000  ................
 89d8 b4890000 012a0000 00000000 00000000  .....*..........
 89e8 00000000 00000000 00000000 00000000  ................
 89f8 00000000 d8890000 013d0000 00000000  .........=......
 8a08 00000000 00000000 00000000 00000000  ................
 8a18 00000000 00000000 fc890000 013c0000  .............<..
 8a28 00000000 00000000 00000000 00000000  ................
 8a38 00000000 00000000 00000000 208a0000  ............ ...
 8a48 013e0000 00000000 00000000 00000000  .>..............
 8a58 00000000 00000000 00000000 00000000  ................
 8a68 448a0000 01260000 00000000 00000000  D....&..........
 8a78 00000000 00000000 00000000 00000000  ................
 8a88 00000000 688a0000 017c0000 00000000  ....h....|......
 8a98 00000000 00000000 00000000 00000000  ................
 8aa8 00000000 00000000 8c8a0000 015e0000  .............^..
 8ab8 00000000 00000000 00000000 00000000  ................
 8ac8 00000000 00000000 00000000 b08a0000  ................
 8ad8 06696e76 65727400 00000000 00000000  .invert.........
 8ae8 00000000 00000000 00000000 00000000  ................
 8af8 d48a0000 01210000 00000000 00000000  .....!..........
 8b08 00000000 00000000 00000000 00000000  ................
 8b18 00000000 f88a0000 01400000 00000000  .........@......
 8b28 00000000 00000000 00000000 00000000  ................
 8b38 00000000 00000000 1c8b0000 02632100  .............c!.
 8b48 00000000 00000000 00000000 00000000  ................
 8b58 00000000 00000000 00000000 408b0000  ............@...
 8b68 02634000 00000000 00000000 00000000  .c@.............
 8b78 00000000 00000000 00000000 00000000  ................
 8b88 648b0000 04657869 74000000 00000000  d....exit.......
 8b98 00000000 00000000 00000000 00000000  ................
 8ba8 00000000 888b0000 06627261 6e636800  .........branch.
 8bb8 00000000 00000000 00000000 00000000  ................
 8bc8 00000000 00000000 ac8b0000 07306272  .............0br
 8bd8 616e6368 00000000 00000000 00000000  anch............
 8be8 00000000 00000000 00000000 d08b0000  ................
 8bf8 04657865 63000000 00000000 00000000  .exec...........
 8c08 00000000 00000000 00000000 00000000  ................
 8c18 f48b0000 05636f75 6e740000 00000000  .....count......
 8c28 00000000 00000000 00000000 00000000  ................
 8c38 00000000 188c0000 073e6e75 6d626572  .........>number
 8c48 00000000 00000000 00000000 00000000  ................
 8c58 00000000 00000000 3c8c0000 06616363  ........<....acc
 8c68 65707400 00000000 00000000 00000000  ept.............
 8c78 00000000 00000000 00000000 608c0000  ............`...
 8c88 04776f72 64000000 00000000 00000000  .word...........
 8c98 00000000 00000000 00000000 00000000  ................
 8ca8 848c0000 04656d69 74000000 00000000  .....emit.......
 8cb8 00000000 00000000 00000000 00000000  ................
 8cc8 00000000 a88c0000 0466696e 64000000  .........find...
 8cd8 00000000 00000000 00000000 00000000  ................
 8ce8 00000000 00000000 cc8c0000 09696e74  .............int
 8cf8 65727072 65740000 00000000 00000000  erpret..........
 8d08 00000000 00000000 00000000           ............    
Contents of section .data:
 11000 00000000 00000000 00000000 00000000  ................
 11010 00000000 00000000 00000000 00000000  ................
 11020 00000000 00000000 00000000 00000000  ................
 11030 00000000 00000000 00000000 00000000  ................
 11040 00000000 00000000 00000000 00000000  ................
 11050 00000000 00000000 00000000 00000000  ................
 11060 00000000 00000000 00000000 00000000  ................
 11070 00000000 00000000 00000000 00000000  ................
 11080 00000000 00000000 00000000 00000000  ................
 11090 00000000 00000000 00000000 00000000  ................
 110a0 00000000 00000000 00000000 00000000  ................
 110b0 00000000 00000000 00000000 00000000  ................
 110c0 00000000 00000000 00000000 00000000  ................
 110d0 00000000 00000000 00000000 00000000  ................
 110e0 00000000 00000000 00000000 00000000  ................
 110f0 00000000 00000000 00000000 00000000  ................
 11100 00000000 00000000 00000000 00000000  ................
 11110 00000000 00000000 00000000 00000000  ................
 11120 00000000 00000000 00000000 00000000  ................
 11130 00000000 00000000 00000000 00000000  ................
 11140 00000000 00000000 00000000 00000000  ................
 11150 00000000 00000000 00000000 00000000  ................
 11160 00000000 00000000 00000000 00000000  ................
 11170 00000000 00000000 00000000 00000000  ................
 11180 00000000 00000000 00000000 00000000  ................
 11190 00000000 00000000 00000000 00000000  ................
 111a0 00000000 00000000 00000000 00000000  ................
 111b0 00000000 00000000 00000000 00000000  ................
 111c0 00000000 00000000 00000000 00000000  ................
 111d0 00000000 00000000 00000000 00000000  ................
 111e0 00000000 00000000 00000000 00000000  ................
 111f0 00000000 00000000 00000000 00000000  ................
 11200 00000000 00000000 00000000 00000000  ................
 11210 00000000 00000000 00000000 00000000  ................
 11220 00000000 00000000 00000000 00000000  ................
 11230 00000000 00000000 00000000 00000000  ................
 11240 00000000 00000000 00000000 00000000  ................
 11250 00000000 00000000 00000000 00000000  ................
 11260 00000000 00000000 00000000 00000000  ................
 11270 00000000 00000000 00000000 00000000  ................
 11280 20000000 00000000 00000000 00000000   ...............
 11290 00000000 00000000 00000000 00000000  ................
 112a0 00000000 00000000 00000000 00000000  ................
 112b0 00000000 00000000 00000000 00000000  ................
 112c0 00000000 00000000 00000000 00000000  ................
 112d0 00000000 00000000 00000000 00000000  ................
 112e0 00000000 00000000 00000000 00000000  ................
 112f0 00000000 00000000 00000000 00000000  ................
 11300 00000000 00000000 00000000 00000000  ................
 11310 00000000 00000000 00000000 00000000  ................
 11320 00000000 00000000 00000000 00000000  ................
 11330 00000000 00000000 00000000 00000000  ................
 11340 00000000 00000000 00000000 00000000  ................
 11350 00000000 00000000 00000000 00000000  ................
 11360 00000000 00000000 00000000 00000000  ................
 11370 00000000 00000000 00000000 00000000  ................
 11380 00000000 00000000 00000000 00000000  ................
 11390 00000000 00000000 00000000 00000000  ................
 113a0 00000000 00000000 00000000 00000000  ................
 113b0 00000000 00000000 00000000 00000000  ................
 113c0 00000000 00000000 00000000 00000000  ................
 113d0 00000000 00000000 00000000 00000000  ................
 113e0 00000000 00000000 00000000 00000000  ................
 113f0 00000000 00000000 00000000 00000000  ................
 11400 00000000 00000000 00000000 00000000  ................
 11410 00000000 00000000 00000000 00000000  ................
 11420 00000000 00000000 00000000 00000000  ................
 11430 00000000 00000000 00000000 00000000  ................
 11440 00000000 00000000 00000000 00000000  ................
 11450 00000000 00000000 00000000 00000000  ................
 11460 00000000 00000000 00000000 00000000  ................
 11470 00000000 00000000 00000000 00000000  ................
 11480 00000000 00000000 00000000 00000000  ................
 11490 00000000 00000000 00000000 00000000  ................
 114a0 00000000 00000000 00000000 00000000  ................
 114b0 00000000 00000000 00000000 00000000  ................
 114c0 00000000 00000000 00000000 00000000  ................
 114d0 00000000 00000000 00000000 00000000  ................
 114e0 00000000 00000000 00000000 00000000  ................
 114f0 00000000 00000000 00000000 00000000  ................
 11500 00000000 00000000 00000000 00000000  ................
 11510 00000000 00000000 00000000 00000000  ................
 11520 00000000 00000000 00000000 00000000  ................
 11530 00000000 00000000 00000000 00000000  ................
 11540 00000000 00000000 00000000 00000000  ................
 11550 00000000 00000000 00000000 00000000  ................
 11560 00000000 00000000 00000000 00000000  ................
 11570 00000000 00000000 00000000 00000000  ................
 11580 00000000 00000000 00000000 00000000  ................
 11590 00000000 00000000 00000000 00000000  ................
 115a0 00000000 00000000 00000000 00000000  ................
 115b0 00000000 00000000 00000000 00000000  ................
 115c0 00000000 00000000 00000000 00000000  ................
 115d0 00000000 00000000 00000000 00000000  ................
 115e0 00000000 00000000 00000000 00000000  ................
 115f0 00000000 00000000 00000000 00000000  ................
 11600 00000000 00000000 00000000 00000000  ................
 11610 00000000 00000000 00000000 00000000  ................
 11620 00000000 00000000 00000000 00000000  ................
 11630 00000000 00000000 00000000 00000000  ................
 11640 00000000 00000000 00000000 00000000  ................
 11650 00000000 00000000 00000000 00000000  ................
 11660 00000000 00000000 00000000 00000000  ................
 11670 00000000 00000000 00000000 00000000  ................
 11680 00000000 00000000 00000000 00000000  ................
 11690 00000000 00000000 00000000 00000000  ................
 116a0 00000000 00000000 00000000 00000000  ................
 116b0 00000000 00000000 00000000 00000000  ................
 116c0 00000000 00000000 00000000 00000000  ................
 116d0 00000000 00000000 00000000 00000000  ................
 116e0 00000000 00000000 00000000 00000000  ................
 116f0 00000000 00000000 00000000 00000000  ................
 11700 00000000 00000000 00000000 00000000  ................
 11710 00000000 00000000 00000000 00000000  ................
 11720 00000000 00000000 00000000 00000000  ................
 11730 00000000 00000000 00000000 00000000  ................
 11740 00000000 00000000 00000000 00000000  ................
 11750 00000000 00000000 00000000 00000000  ................
 11760 00000000 00000000 00000000 00000000  ................
 11770 00000000 00000000 00000000 00000000  ................
 11780 00000000 00000000 00000000 00000000  ................
 11790 00000000 00000000 00000000 00000000  ................
 117a0 00000000 00000000 00000000 00000000  ................
 117b0 00000000 00000000 00000000 00000000  ................
 117c0 00000000 00000000 00000000 00000000  ................
 117d0 00000000 00000000 00000000 00000000  ................
 117e0 00000000 00000000 00000000 00000000  ................
 117f0 00000000 00000000 00000000 00000000  ................
 11800 00000000 00000000 00000000 00000000  ................
 11810 00000000 00000000 00000000 00000000  ................
 11820 00000000 00000000 00000000 00000000  ................
 11830 00000000 00000000 00000000 00000000  ................
 11840 00000000 00000000 00000000 00000000  ................
 11850 00000000 00000000 00000000 00000000  ................
 11860 00000000 00000000 00000000 00000000  ................
 11870 00000000 00000000 00000000 00000000  ................
 11880 00000000 00000000 00000000 00000000  ................
 11890 00000000 00000000 00000000 00000000  ................
 118a0 00000000 00000000 00000000 00000000  ................
 118b0 00000000 00000000 00000000 00000000  ................
 118c0 00000000 00000000 00000000 00000000  ................
 118d0 00000000 00000000 00000000 00000000  ................
 118e0 00000000 00000000 00000000 00000000  ................
 118f0 00000000 00000000 00000000 00000000  ................
 11900 00000000 00000000 00000000 00000000  ................
 11910 00000000 00000000 00000000 00000000  ................
 11920 00000000 00000000 00000000 00000000  ................
 11930 00000000 00000000 00000000 00000000  ................
 11940 00000000 00000000 00000000 00000000  ................
 11950 00000000 00000000 00000000 00000000  ................
 11960 00000000 00000000 00000000 00000000  ................
 11970 00000000 00000000 00000000 00000000  ................
 11980 00000000 00000000 00000000 00000000  ................
 11990 00000000 00000000 00000000 00000000  ................
 119a0 00000000 00000000 00000000 00000000  ................
 119b0 00000000 00000000 00000000 00000000  ................
 119c0 00000000 00000000 00000000 00000000  ................
 119d0 00000000 00000000 00000000 00000000  ................
 119e0 00000000 00000000 00000000 00000000  ................
 119f0 00000000 00000000 00000000 00000000  ................
 11a00 00000000 00000000 00000000 00000000  ................
 11a10 00000000 00000000 00000000 00000000  ................
 11a20 00000000 00000000 00000000 00000000  ................
 11a30 00000000 00000000 00000000 00000000  ................
 11a40 00000000 00000000 00000000 00000000  ................
 11a50 00000000 00000000 00000000 00000000  ................
 11a60 00000000 00000000 00000000 00000000  ................
 11a70 00000000 00000000 00000000 00000000  ................
 11a80 00                                   .               
Contents of section .ARM.attributes:
 0000 41150000 00616561 62690001 0b000000  A....aeabi......
 0010 06020801 0901                        ......          
Contents of section .debug_aranges:
 0000 1c000000 02000000 00000400 00000000  ................
 0010 74800000 04060000 00000000 00000000  t...............
Contents of section .debug_info:
 0000 3c000000 02000000 00000401 00000000  <...............
 0010 74800000 78860000 636f7265 2e73002f  t...x...core.s./
 0020 6d6e742f 662f6d79 5f666f72 74680047  mnt/f/my_forth.G
 0030 4e552041 5320322e 32342e35 31000180  NU AS 2.24.51...
Contents of section .debug_abbrev:
 0000 01110010 06110112 0103081b 08250813  .............%..
 0010 05000000                             ....            
Contents of section .debug_line:
 0000 42010000 02001d00 00000201 fb0e0d00  B...............
 0010 01010101 00000001 00000100 636f7265  ............core
 0020 2e730000 00000000 0502ac80 000003e8  .s..............
 0030 0001502f 302f2f30 2f2f2f30 2f362f2f  ..P/0//0///0/6//
 0040 0313f22f 2f032202 3a012f2f 2f502f03  ...//.".:.///P/.
 0050 129e2f2f 030b4a2f 2f512f2f 2f2f2f03  ..//..J//Q/////.
 0060 0b4a2f51 2f2f2f51 2f512f2f 2f512f2f  .J/Q///Q/Q///Q//
 0070 2f2f2f51 2f2f512f 2f030b4a 2f2f512f  ///Q//Q//..J//Q/
 0080 2f512f2f 2f512f2f 2f2f512f 2f2f2f51  /Q///Q////Q////Q
 0090 2f2f2f2f 512f2f51 2f2f512f 2f512f03  ////Q//Q//Q//Q/.
 00a0 0b4a2f2f 2f512f51 2f2f2f51 2f2f2f03  .J///Q/Q///Q///.
 00b0 0b4a2f51 2f2f512f 2f2f2f2f 512f2f2f  .J/Q//Q/////Q///
 00c0 030b4a2f 2f2f2f2f 522f2f2f 2f302f2f  ..J/////R////0//
 00d0 2f2f2f30 2f2f2f2f 302f2f2f 2f2f2f2f  ///0////0///////
 00e0 2f2f2f30 302f2f03 0d4a512f 2f2f2f2f  ///00//..JQ/////
 00f0 2f2f2f2f 2f2f302f 2f2f2f2f 302f2f2f  //////0/////0///
 0100 2f2f2f2f 302f2f2f 2f2f2f2f 2f2f2f51  ////0//////////Q
 0110 2f2f2f32 2f2f2f2f 2f2f322f 2f2f2f2f  ///2//////2/////
 0120 2f2f2f03 e67b028a 01013103 092e03cb  ///..{....1.....
 0130 002e0329 2e039f02 2e03372e 3131032e  ...)......7.11..
 0140 2e020200 0101                        ......          

Disassembly of section .text:

00008074 <xt_state>:
    8074:	00008184 	andeq	r8, r0, r4, lsl #3

00008078 <val_state>:
    8078:	00000000 	andeq	r0, r0, r0

0000807c <xt_to_in>:
    807c:	00008184 	andeq	r8, r0, r4, lsl #3

00008080 <val_to_in>:
    8080:	00000000 	andeq	r0, r0, r0

00008084 <xt_num_tib>:
    8084:	00008184 	andeq	r8, r0, r4, lsl #3

00008088 <val_num_tib>:
    8088:	00000000 	andeq	r0, r0, r0

0000808c <xt_dp>:
    808c:	00008184 	andeq	r8, r0, r4, lsl #3

00008090 <val_dp>:
    8090:	00011281 	andeq	r1, r1, r1, lsl #5

00008094 <xt_base>:
    8094:	00008184 	andeq	r8, r0, r4, lsl #3

00008098 <val_base>:
    8098:	0000000a 	andeq	r0, r0, sl

0000809c <xt_last>:
    809c:	00008184 	andeq	r8, r0, r4, lsl #3

000080a0 <val_last>:
    80a0:	00008cf0 	strdeq	r8, [r0], -r0

000080a4 <xt_tib>:
    80a4:	000081b0 			; <UNDEFINED> instruction: 0x000081b0

000080a8 <val_tib>:
    80a8:	00011200 	andeq	r1, r1, r0, lsl #4

000080ac <_start>:
//----------------

	.align 2
	.text
_start:
	b quit
    80ac:	ea000000 	b	80b4 <quit>

000080b0 <xt_quit>:
    80b0:	000080b4 	strheq	r8, [r0], -r4

000080b4 <quit>:

// quit ( -- )
	define "quit", 4, , quit
	.word quit
quit:
	ldr r11, =stack_base    // Init the return stack.
    80b4:	e59fb594 	ldr	fp, [pc, #1428]	; 8650 <intdone+0x8>
	ldr sp, =stack_base     // Init the data stack.
    80b8:	e59fd590 	ldr	sp, [pc, #1424]	; 8650 <intdone+0x8>

	ldr r1, =val_state      // Set state to 0.
    80bc:	e59f1590 	ldr	r1, [pc, #1424]	; 8654 <intdone+0xc>
	eor r0, r0
    80c0:	e0200000 	eor	r0, r0, r0
	str r0, [r1]
    80c4:	e5810000 	str	r0, [r1]

	adr r0, val_num_tib      // Copy value of "#tib" to ">in".
    80c8:	e24f0048 	sub	r0, pc, #72	; 0x48
	ldr r0, [r0]
    80cc:	e5900000 	ldr	r0, [r0]
	adr r1, val_to_in
    80d0:	e24f1058 	sub	r1, pc, #88	; 0x58
	str r0, [r1]
    80d4:	e5810000 	str	r0, [r1]

	ldr r10, =xt_interpret   // Set the virtual instruction pointer to "interpret"
    80d8:	e59fa578 	ldr	sl, [pc, #1400]	; 8658 <intdone+0x10>
	b next
    80dc:	eaffffff 	b	80e0 <next>

000080e0 <next>:
// Inner interpreter
//----------------

// Next will move on to the next forth word.
next:
	ldr r8, [r10], #4   // r0 = ip, and ip = ip + 4.
    80e0:	e49a8004 	ldr	r8, [sl], #4
	ldr r8, [r8]        // Dereference, since this forth is indirect threaded code.
    80e4:	e5988000 	ldr	r8, [r8]
	bx r8
    80e8:	e12fff18 	bx	r8

000080ec <xt_colon>:
    80ec:	000080f0 	strdeq	r8, [r0], -r0

000080f0 <colon>:
    80f0:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    80f4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
    80f8:	00008074 	andeq	r8, r0, r4, ror r0
    80fc:	0000831c 	andeq	r8, r0, ip, lsl r3
    8100:	00008138 	andeq	r8, r0, r8, lsr r1
    8104:	00008194 	muleq	r0, r4, r1

00008108 <docol>:
	.word xt_create            // Create a new header for the next word.
	.word xt_do_semi_code      // Make "docolon" be the runtime code for the new header.

// Runtime code for colon-defined words.
docol:
	str r10, [r11, #-4]!
    8108:	e52ba004 	str	sl, [fp, #-4]!
	add r10, r0, #4
    810c:	e280a004 	add	sl, r0, #4
	b next
    8110:	eafffff2 	b	80e0 <next>

00008114 <xt_semicolon>:
    8114:	00008108 	andeq	r8, r0, r8, lsl #2

00008118 <semicolon>:
    8118:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    811c:	00008364 	andeq	r8, r0, r4, ror #6
    8120:	000081cc 	andeq	r8, r0, ip, asr #3
    8124:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    8128:	00000000 	andeq	r0, r0, r0
    812c:	00008074 	andeq	r8, r0, r4, ror r0
    8130:	0000831c 	andeq	r8, r0, ip, lsl r3
    8134:	00008364 	andeq	r8, r0, r4, ror #6

00008138 <xt_create>:
    8138:	00008108 	andeq	r8, r0, r8, lsl #2
    813c:	0000808c 	andeq	r8, r0, ip, lsl #1
    8140:	00008330 	andeq	r8, r0, r0, lsr r3
    8144:	0000809c 	muleq	r0, ip, r0
    8148:	00008330 	andeq	r8, r0, r0, lsr r3
    814c:	000081cc 	andeq	r8, r0, ip, asr #3
    8150:	0000809c 	muleq	r0, ip, r0
    8154:	0000831c 	andeq	r8, r0, ip, lsl r3
    8158:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    815c:	00000020 	andeq	r0, r0, r0, lsr #32
    8160:	00008454 	andeq	r8, r0, r4, asr r4
    8164:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
    8168:	00008264 	andeq	r8, r0, r4, ror #4
    816c:	0000808c 	andeq	r8, r0, ip, lsl #1
    8170:	0000831c 	andeq	r8, r0, ip, lsl r3
    8174:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    8178:	00000000 	andeq	r0, r0, r0
    817c:	000081cc 	andeq	r8, r0, ip, asr #3
    8180:	00008194 	muleq	r0, r4, r1

00008184 <dovar>:
	.word xt_lit, 0
	.word xt_comma
	.word xt_do_semi_code

dovar:
	str r9, [r13, #-4]!    // Prepare a push for r9.
    8184:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	mov r9, r8             // r9 = [XT + 4].
    8188:	e1a09008 	mov	r9, r8
	add r9, #4             // (r9 should be an address).
    818c:	e2899004 	add	r9, r9, #4
	b next
    8190:	eaffffd2 	b	80e0 <next>

00008194 <xt_do_semi_code>:
    8194:	00008198 	muleq	r0, r8, r1

00008198 <do_semi_code>:

// (;code) ( -- )
define "(;code)", 7, , do_semi_code
	.word do_semi_code
do_semi_code:
	ldr r8, =val_last       // Set r8 to the link field address of the last dictionary word.
    8198:	e59f84bc 	ldr	r8, [pc, #1212]	; 865c <intdone+0x14>
	ldr r8, [r8]
    819c:	e5988000 	ldr	r8, [r8]

000081a0 <xt_const>:
    81a0:	00008108 	andeq	r8, r0, r8, lsl #2
    81a4:	00008138 	andeq	r8, r0, r8, lsr r1
    81a8:	000081cc 	andeq	r8, r0, ip, asr #3
    81ac:	00008194 	muleq	r0, r4, r1

000081b0 <doconst>:
	.word xt_create
	.word xt_comma
	.word xt_do_semi_code

doconst:                   // Runtime code for words that push a constant.
	str r9, [r13, #-4]!    // Push the stack.
    81b0:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	ldr r9, [r8, #4]       // Fetch the data, which is bytes 4 after the CFA.
    81b4:	e5989004 	ldr	r9, [r8, #4]
	b next                 
    81b8:	eaffffc8 	b	80e0 <next>

000081bc <xt_lit>:
    81bc:	000081c0 	andeq	r8, r0, r0, asr #3

000081c0 <lit>:
// lit ( -- )
// Pushes the next value in the cell right after itself
	define "lit", 3, F_IMMEDIATE, lit
	.word lit
lit:
	str r9, [r13, #-4]!     // Push to the stack.
    81c0:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	ldr r9, [r10], #4       // Get the next cell value and put it in r9 while
    81c4:	e49a9004 	ldr	r9, [sl], #4
	b next                  // also incrementing r10 by 4 bytes.
    81c8:	eaffffc4 	b	80e0 <next>

000081cc <xt_comma>:
    81cc:	000081d0 	ldrdeq	r8, [r0], -r0

000081d0 <comma>:
// , ( x -- )
// Comma compiles the value x to the dictionary
	define ",", 1, , comma
	.word comma
comma:
	ldr r8, =val_dp         // Set r8 to the dictionary pointer.
    81d0:	e59f8488 	ldr	r8, [pc, #1160]	; 8660 <intdone+0x18>
	mov r7, r8              // r7 = copy of dp.
    81d4:	e1a07008 	mov	r7, r8
	str r9, [r8], #4        // Store TOS to the dictionary ptr and increment ptr.
    81d8:	e4889004 	str	r9, [r8], #4
	str r8, [r7]            // Update the val_dp with the new dictionary pointer.
    81dc:	e5878000 	str	r8, [r7]
	ldr r9, [r13], #4       // Pop the stack.
    81e0:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next
    81e4:	eaffffbd 	b	80e0 <next>

000081e8 <xt_drop>:
    81e8:	000081ec 	andeq	r8, r0, ip, ror #3

000081ec <drop>:
// drop ( a -- )
// drops the top element of the stack 
	define "drop", 4, , drop
	.word drop
drop:
	ldr r9, [r13], #4
    81ec:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next
    81f0:	eaffffba 	b	80e0 <next>

000081f4 <xt_swap>:
    81f4:	000081f8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>

000081f8 <swap>:
// swap ( a b -- b a )
// swaps the two top items on the stack
	define "swap", 4, , swap
	.word swap
swap:
	ldr r0, [r13], #4
    81f8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	str r9, [r13, #-4]!
    81fc:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	mov r9, r0
    8200:	e1a09000 	mov	r9, r0
	b next
    8204:	eaffffb5 	b	80e0 <next>

00008208 <xt_dup>:
    8208:	0000820c 	andeq	r8, r0, ip, lsl #4

0000820c <dup>:
// dup ( a -- a a )
// duplicates the top item on the stack 
	define "dup", 3, , dup
	.word dup
dup:
	str r9, [r13, #-4]!
    820c:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	b next
    8210:	eaffffb2 	b	80e0 <next>

00008214 <xt_over>:
    8214:	00008218 	andeq	r8, r0, r8, lsl r2

00008218 <over>:
// over ( a b -- a b a )
// duplicates the second item on the stack
	define "over", 4, , over
	.word over
over:
	ldr r0, [r13]       // r0 = get the second item on stack
    8218:	e59d0000 	ldr	r0, [sp]
	str r9, [r13, #-4]! // push TOS to the rest of the stack
    821c:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	mov r9, r0          // TOS = r0
    8220:	e1a09000 	mov	r9, r0
	b next
    8224:	eaffffad 	b	80e0 <next>

00008228 <xt_rot>:
    8228:	0000822c 	andeq	r8, r0, ip, lsr #4

0000822c <rot>:
// rot ( x y z -- y z x)
// rotate the third item on the stack to the top
	define "rot", 3, , rot
	.word rot
rot:
	ldr r0, [r13], #4   // pop y
    822c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	ldr r1, [r13], #4   // pop x
    8230:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	str r0, [r13, #-4]! // push y
    8234:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
	str r9, [r13, #-4]! // push z
    8238:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	mov r9, r1          // push x
    823c:	e1a09001 	mov	r9, r1
	b next
    8240:	eaffffa6 	b	80e0 <next>

00008244 <xt_to_r>:
    8244:	00008248 	andeq	r8, r0, r8, asr #4

00008248 <to_r>:
// >R ( a -- )
// move the top element from the data stack to the return stack 
	define ">R", 2, , to_r
	.word to_r
to_r:
	str r9, [r11, #-4]!
    8248:	e52b9004 	str	r9, [fp, #-4]!
	ldr r9, [r13], #4
    824c:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next
    8250:	eaffffa2 	b	80e0 <next>

00008254 <xt_r_from>:
    8254:	00008258 	andeq	r8, r0, r8, asr r2

00008258 <r_from>:
// R> ( -- a )
// move the top element from the return stack to the data stack 
	define "R>", 2, , r_from
	.word r_from
r_from:
	str r9, [r13, #-4]!
    8258:	e52d9004 	push	{r9}		; (str r9, [sp, #-4]!)
	ldr r9, [r11], #4
    825c:	e49b9004 	ldr	r9, [fp], #4
	b next
    8260:	eaffff9e 	b	80e0 <next>

00008264 <xt_add>:
    8264:	00008268 	andeq	r8, r0, r8, ror #4

00008268 <add>:
// + ( a b -- a+b) 
// addition
define "+", 1, , add
	.word add
add:
	ldr r0, [r13], #4
    8268:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	add r9, r0, r9
    826c:	e0809009 	add	r9, r0, r9
	b next
    8270:	eaffff9a 	b	80e0 <next>

00008274 <xt_sub>:
    8274:	00008278 	andeq	r8, r0, r8, ror r2

00008278 <sub>:
// - ( a b -- a-b) 
// subtraction
define "-", 1, , sub
	.word sub
sub:
	ldr r0, [r13], #4
    8278:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	sub r9, r9, r1
    827c:	e0499001 	sub	r9, r9, r1
	b next
    8280:	eaffff96 	b	80e0 <next>

00008284 <xt_multiply>:
    8284:	00008288 	andeq	r8, r0, r8, lsl #5

00008288 <multiply>:
// * ( x y -- x*y) 
// multiplication
define "*", 1, , multiply
	.word multiply
multiply:
	ldr r0, [r13], #4
    8288:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	mov r1, r9        // use r1 because multiply can't be a src and a dest on ARM
    828c:	e1a01009 	mov	r1, r9
	mul r9, r0, r1
    8290:	e0090190 	mul	r9, r0, r1
	b next
    8294:	eaffff91 	b	80e0 <next>

00008298 <xt_equal>:
    8298:	0000829c 	muleq	r0, ip, r2

0000829c <equal>:
// = ( a b -- p ) 
// test for equality, -1=True, 0=False
define "=", 1, , equal
	.word equal
equal:
	ldr r0, [r13], #4
    829c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	cmp r9, r0
    82a0:	e1590000 	cmp	r9, r0
	moveq r9, #-1
    82a4:	03e09000 	mvneq	r9, #0
	movne r9, #0
    82a8:	13a09000 	movne	r9, #0
	b next
    82ac:	eaffff8b 	b	80e0 <next>

000082b0 <xt_lt>:
    82b0:	000082b4 			; <UNDEFINED> instruction: 0x000082b4

000082b4 <lt>:
// < ( x y -- y<x )
// less-than, see "=" for truth values
define "<", 1, , lt
	.word lt
lt:
	ldr r0, [r13], #4
    82b4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	cmp r9, r0
    82b8:	e1590000 	cmp	r9, r0
	movlt r9, #-1
    82bc:	b3e09000 	mvnlt	r9, #0
	movge r9, #0
    82c0:	a3a09000 	movge	r9, #0
	b next
    82c4:	eaffff85 	b	80e0 <next>

000082c8 <xt_gt>:
    82c8:	000082cc 	andeq	r8, r0, ip, asr #5

000082cc <gt>:
// > ( x y -- y>x )
// greater-than, see "=" for truth values
define ">", 1, , gt
	.word gt
gt:
	ldr r0, [r13], #4
    82cc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	cmp r9, r0
    82d0:	e1590000 	cmp	r9, r0
	movge r9, #-1
    82d4:	a3e09000 	mvnge	r9, #0
	movlt r9, #0
    82d8:	b3a09000 	movlt	r9, #0
	b next
    82dc:	eaffff7f 	b	80e0 <next>

000082e0 <xt_and>:
    82e0:	000082e4 	andeq	r8, r0, r4, ror #5

000082e4 <do_and>:
// & AND ( a b -- a&b)
// bitwise and 
define "&", 1, , and
	.word do_and
do_and:
	ldr r0, [r13], #4
    82e4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	and r9, r9, r0
    82e8:	e0099000 	and	r9, r9, r0
	b next
    82ec:	eaffff7b 	b	80e0 <next>

000082f0 <xt_or>:
    82f0:	000082f4 	strdeq	r8, [r0], -r4

000082f4 <do_or>:
// | ( a b -- a|b )
// bitwise or 
define "|", 1, , or
	.word do_or
do_or:
	ldr r0, [r13], #4
    82f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	orr r9, r9, r0
    82f8:	e1899000 	orr	r9, r9, r0
	b next
    82fc:	eaffff77 	b	80e0 <next>

00008300 <xt_xor>:
    8300:	00008304 	andeq	r8, r0, r4, lsl #6

00008304 <xor>:
// ^ ( a b -- a^b )
// bitwise xor 
define "^", 1, , xor
	.word xor
xor:
	ldr r0, [r13], #4
    8304:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	eor r9, r9, r0
    8308:	e0299000 	eor	r9, r9, r0
	b next
    830c:	eaffff73 	b	80e0 <next>

00008310 <xt_invert>:
    8310:	00008314 	andeq	r8, r0, r4, lsl r3

00008314 <invert>:
// invert ( a -- ~a )
// bitwise not/invert
define "invert", 6, , invert
	.word invert
invert:
	mvn r9, r9
    8314:	e1e09009 	mvn	r9, r9
	b next
    8318:	eaffff70 	b	80e0 <next>

0000831c <xt_store>:
    831c:	00008320 	andeq	r8, r0, r0, lsr #6

00008320 <store>:
// ! ( val addr -- )
// store value to address 
define "!", 1, , store
	.word store
store:
	ldr r0, [r13], #4
    8320:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	str r0, [r9]
    8324:	e5890000 	str	r0, [r9]
	ldr r9, [r13], #4
    8328:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next
    832c:	eaffff6b 	b	80e0 <next>

00008330 <xt_fetch>:
    8330:	00008334 	andeq	r8, r0, r4, lsr r3

00008334 <fetch>:
// @ ( addr -- val )
// fetch value from address 
define "@", 1, , fetch
	.word fetch
fetch:
	ldr r9, [r9]
    8334:	e5999000 	ldr	r9, [r9]
	b next
    8338:	eaffff68 	b	80e0 <next>

0000833c <xt_cstore>:
    833c:	00008340 	andeq	r8, r0, r0, asr #6

00008340 <cstore>:
// c! ( val addr -- )
// store byte, does what "!" does, but for a single byte
define "c!", 2, , cstore
	.word cstore
cstore:
	ldr r0, [r13], #4
    8340:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	strb r0, [r9]
    8344:	e5c90000 	strb	r0, [r9]
	ldr r9, [r13], #4
    8348:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next 
    834c:	eaffff63 	b	80e0 <next>

00008350 <xt_cfetch>:
    8350:	00008354 	andeq	r8, r0, r4, asr r3

00008354 <cfetch>:
// c@ ( addr -- val )
// fetch byte, does what "@" does for a single byte
define "c@", 2, , cfetch
	.word cfetch
cfetch:
	mov r0, #0
    8354:	e3a00000 	mov	r0, #0
	ldrb r0, [r9]
    8358:	e5d90000 	ldrb	r0, [r9]
	ldr r9, [r13], #4
    835c:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next 
    8360:	eaffff5e 	b	80e0 <next>

00008364 <xt_exit>:
    8364:	00008368 	andeq	r8, r0, r8, ror #6

00008368 <exit>:
// exit ( -- )
// exit/return from current word
define "exit", 4, , exit
	.word exit
exit:
	ldr r10, [r11], #4   // ip = pop return stack
    8368:	e49ba004 	ldr	sl, [fp], #4
	b next
    836c:	eaffff5b 	b	80e0 <next>

00008370 <xt_branch>:
    8370:	00008374 	andeq	r8, r0, r4, ror r3

00008374 <branch>:
// branch ( -- )
// changes the forth IP to the next codeword
define "branch", 6, , branch
	.word branch
branch:
	ldr r1, [r10]
    8374:	e59a1000 	ldr	r1, [sl]
	mov r10, r1    // absolute jump
    8378:	e1a0a001 	mov	sl, r1
	b next
    837c:	eaffff57 	b	80e0 <next>

00008380 <xt_zero_branch>:
    8380:	00008384 	andeq	r8, r0, r4, lsl #7

00008384 <zero_branch>:
// 0branch ( p -- )
// branch if the top of the stack is zero 
define "0branch", 7, , zero_branch
	.word zero_branch
zero_branch:
	ldr r0, [r13], #4
    8384:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	cmp r0, #0          // if the top of the stack is zero:
    8388:	e3500000 	cmp	r0, #0
	ldreq r1, [r10]     // branch
    838c:	059a1000 	ldreq	r1, [sl]
	moveq r10, r1       // ...
    8390:	01a0a001 	moveq	sl, r1
	addne r10, r10, #4 // else: do not branch
    8394:	128aa004 	addne	sl, sl, #4
	b next
    8398:	eaffff50 	b	80e0 <next>

0000839c <xt_exec>:
    839c:	000083a0 	andeq	r8, r0, r0, lsr #7

000083a0 <exec>:
// exec ( xt -- )
// execute the XT on the stack
define "exec", 4, , exec
	.word exec
exec:
	mov r0, r9        // save TOS to r0
    83a0:	e1a00009 	mov	r0, r9
	ldr r9, [r13], #4 // pop the stack
    83a4:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	ldr r0, [r0]      // dereference r0
    83a8:	e5900000 	ldr	r0, [r0]
	bx r0             // goto r0
    83ac:	e12fff10 	bx	r0

000083b0 <xt_count>:
    83b0:	000083b4 			; <UNDEFINED> instruction: 0x000083b4

000083b4 <count>:
// count ( addr1 -- addr2 len )
// Convert a counted string address to the first char address and the length
define "count", 5, , count
	.word count
count:
	mov r0, r9
    83b4:	e1a00009 	mov	r0, r9
	add r0, #1
    83b8:	e2800001 	add	r0, r0, #1
	push {r0}
    83bc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
	ldr r9, [r9]
    83c0:	e5999000 	ldr	r9, [r9]
	and r9, #F_LENMASK
    83c4:	e209903f 	and	r9, r9, #63	; 0x3f
	b next
    83c8:	eaffff44 	b	80e0 <next>

000083cc <xt_to_number>:
    83cc:	000083d0 	ldrdeq	r8, [r0], -r0

000083d0 <to_number>:
//         ( d addr len -- int addr2 non-zero ) if error
define ">number", 7, , to_number
	.word to_number
to_number:
    //                    // r9 = length (already set)
	ldr r0, [r13], #4    // r0 = addr
    83d0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
	ldr r1, [r13], #4    // r1 = d.hi
    83d4:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	ldr r2, [r13], #4    // r2 = d.lo
    83d8:	e49d2004 	pop	{r2}		; (ldr r2, [sp], #4)
	ldr r4, =val_base    // get the current number base
    83dc:	e59f4280 	ldr	r4, [pc, #640]	; 8664 <intdone+0x1c>
	ldr r4, [r4]
    83e0:	e5944000 	ldr	r4, [r4]

000083e4 <to_num1>:
to_num1:
	cmp r9, #0           // if length=0 then done converting
    83e4:	e3590000 	cmp	r9, #0
	beq to_num4
    83e8:	0a000013 	beq	843c <to_num4>
	ldrb r3, [r0], #1    // get next char in the string
    83ec:	e4d03001 	ldrb	r3, [r0], #1
	cmp r3, #'a'          // if it's less than 'a', it's not lower case
    83f0:	e3530061 	cmp	r3, #97	; 0x61
	blt to_num2        
    83f4:	ba000000 	blt	83fc <to_num2>
	sub r3, #32          // convert the 'a'-'z' from lower case to upper case
    83f8:	e2433020 	sub	r3, r3, #32

000083fc <to_num2>:
to_num2:
	cmp r3, #'9'+1        // if char is less than '9' its probably a decimal digit
    83fc:	e353003a 	cmp	r3, #58	; 0x3a
	blt to_num3
    8400:	ba000002 	blt	8410 <to_num3>
	cmp r3, #'A'          // its a character between '9' and 'A', which is an error
    8404:	e3530041 	cmp	r3, #65	; 0x41
	blt to_num5
    8408:	ba00000c 	blt	8440 <to_num5>
	sub r3, #7           // a valid char for a base>10, so convert it so that 'A' signifies 10
    840c:	e2433007 	sub	r3, r3, #7

00008410 <to_num3>:
to_num3:
	sub r3, #48          // convert char digit to value
    8410:	e2433030 	sub	r3, r3, #48	; 0x30
	cmp r3, r4           // if digit >= base then it's an error
    8414:	e1530004 	cmp	r3, r4
	bge to_num5
    8418:	aa000008 	bge	8440 <to_num5>
	mul r5, r1, r4       // multiply the high-word by the base
    841c:	e0050491 	mul	r5, r1, r4
	mov r1, r5
    8420:	e1a01005 	mov	r1, r5
	mul r5, r2, r4       // multiply the low-word by the base
    8424:	e0050492 	mul	r5, r2, r4
	mov r2, r5
    8428:	e1a02005 	mov	r2, r5
	add r2, r2, r3       // add the digit value to the low word (no need to carry)
    842c:	e0822003 	add	r2, r2, r3
	add r9, #1           // length--
    8430:	e2899001 	add	r9, r9, #1
	sub r0, #1           // addr++
    8434:	e2400001 	sub	r0, r0, #1
	b to_num1
    8438:	eaffffe9 	b	83e4 <to_num1>

0000843c <to_num4>:
to_num4:
	str r2, [r13, #-4]!  // push the low word
    843c:	e52d2004 	push	{r2}		; (str r2, [sp, #-4]!)

00008440 <to_num5>:
to_num5:               
	str r1, [r13, #-4]!  // push the high word
    8440:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	str r0, [r13, #-4]!  // push the string address
    8444:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
	b next
    8448:	eaffff24 	b	80e0 <next>

0000844c <xt_accept>:
    844c:	00008450 	andeq	r8, r0, r0, asr r4

00008450 <accept>:
// read.
define "accept", 6, , accept
	.word accept
accept:
	// TODO
	b next
    8450:	eaffff22 	b	80e0 <next>

00008454 <xt_word>:
    8454:	00008458 	andeq	r8, r0, r8, asr r4

00008458 <word>:
// word ( char -- addr )
// scan the input buffer for a character
define "word", 4, , word
	.word word
word:
	ldr r0, =val_dp          // load dp to use it as a scratchpad
    8458:	e59f0200 	ldr	r0, [pc, #512]	; 8660 <intdone+0x18>
	ldr r0, [r0]
    845c:	e5900000 	ldr	r0, [r0]
	mov r4, r0               // save the dp to r4 for end of routine
    8460:	e1a04000 	mov	r4, r0
	ldr r1, =val_tib         // load address of the input buffer
    8464:	e59f11fc 	ldr	r1, [pc, #508]	; 8668 <intdone+0x20>
	ldr r1, [r1]
    8468:	e5911000 	ldr	r1, [r1]
	mov r2, r1               // copy address to r2
    846c:	e1a02001 	mov	r2, r1
	ldr r3, =val_to_in       // set r1 to tib + >in
    8470:	e59f31f4 	ldr	r3, [pc, #500]	; 866c <intdone+0x24>
	ldr r3, [r3]
    8474:	e5933000 	ldr	r3, [r3]
	add r1, r3               // r1 holds the current pointer into the input buf
    8478:	e0811003 	add	r1, r1, r3
	ldr r3, =val_num_tib  // set r2 to tib + #tib
    847c:	e59f31ec 	ldr	r3, [pc, #492]	; 8670 <intdone+0x28>
	ldr r3, [r3]
    8480:	e5933000 	ldr	r3, [r3]
	add r2, r3               // r2 holds the addr of the end of the input buf
    8484:	e0822003 	add	r2, r2, r3

00008488 <word1>:
word1:
	cmp r2, r1               // branch if we reached the end of the buffer
    8488:	e1520001 	cmp	r2, r1
	beq word3
    848c:	0a00000b 	beq	84c0 <word3>
	ldrb r3, [r1]            // get the next char from the buffer
    8490:	e5d13000 	ldrb	r3, [r1]
	add r1, #1
    8494:	e2811001 	add	r1, r1, #1
	cmp r3, r9               // get more chars if the char is the separator
    8498:	e1530009 	cmp	r3, r9
	beq word1
    849c:	0afffff9 	beq	8488 <word1>

000084a0 <word2>:
word2:
	add r0, #1               // increment pad pointer
    84a0:	e2800001 	add	r0, r0, #1
	strb r3, [r0]            // write the char to the pad
    84a4:	e5c03000 	strb	r3, [r0]
	cmp r2, r1               // branch if we reached the end of the buffer
    84a8:	e1520001 	cmp	r2, r1
	beq word3
    84ac:	0a000003 	beq	84c0 <word3>
	ldrb r3, [r1]            // get next char from the buffer
    84b0:	e5d13000 	ldrb	r3, [r1]
	add r1, #1
    84b4:	e2811001 	add	r1, r1, #1
	cmp r3, r9               // get more characters if it's not the separator
    84b8:	e1530009 	cmp	r3, r9
	bne word2
    84bc:	1afffff7 	bne	84a0 <word2>

000084c0 <word3>:
word3:
	mov r3, #' '              // terminate the word in pad with a space
    84c0:	e3a03020 	mov	r3, #32
	strb r3, [r1, #1]        
    84c4:	e5c13001 	strb	r3, [r1, #1]
	sub r0, r1               // r0 = pad_ptr - dp
    84c8:	e0400001 	sub	r0, r0, r1
	strb r0, [r4]             // save the length byte into the first byte of pad
    84cc:	e5c40000 	strb	r0, [r4]
	ldr r0, =val_tib         // ">in" = "tib" - pad_ptr
    84d0:	e59f0190 	ldr	r0, [pc, #400]	; 8668 <intdone+0x20>
	ldr r0, [r0]
    84d4:	e5900000 	ldr	r0, [r0]
	sub r1, r0              
    84d8:	e0411000 	sub	r1, r1, r0
	ldr r0, =val_to_in
    84dc:	e59f0188 	ldr	r0, [pc, #392]	; 866c <intdone+0x24>
	str r1, [r0]
    84e0:	e5801000 	str	r1, [r0]
	mov r9, r4               // The starting dp is the return value.
    84e4:	e1a09004 	mov	r9, r4
	b next
    84e8:	eafffefc 	b	80e0 <next>

000084ec <xt_emit>:
    84ec:	00008458 	andeq	r8, r0, r8, asr r4

000084f0 <emit>:
// emit ( char -- )
// display a character
define "emit", 4, , emit
	.word word
emit:
	mov r0, r9
    84f0:	e1a00009 	mov	r0, r9
	bl outchar
    84f4:	eb000008 	bl	851c <outchar>
	ldr r9, [r13], #4   // Pop the stack.
    84f8:	e49d9004 	pop	{r9}		; (ldr r9, [sp], #4)
	b next
    84fc:	eafffef7 	b	80e0 <next>

00008500 <getchar>:

// Headerless routine to get a character into r0 from the terminal.
getchar:
	mov r7, #3      // linux system call for read(...)
    8500:	e3a07003 	mov	r7, #3
	mov r0, #0      // fd = stdin
    8504:	e3a00000 	mov	r0, #0
	ldr r1, =char   // buf = &char
    8508:	e59f1164 	ldr	r1, [pc, #356]	; 8674 <intdone+0x2c>
	mov r2, #1      // count = 1 
    850c:	e3a02001 	mov	r2, #1
	swi #0          // read(...)
    8510:	ef000000 	svc	0x00000000
	ldr r0, [r0]    // ch = *char
    8514:	e5900000 	ldr	r0, [r0]
	bx lr           // return ch
    8518:	e12fff1e 	bx	lr

0000851c <outchar>:

// Headerless routine to send out a character in r0 to the terminal.
outchar:
	and r0, #255    // Make sure the char passed is in range.
    851c:	e20000ff 	and	r0, r0, #255	; 0xff
	ldr r1, =char   // Store the char into the char buffer.
    8520:	e59f114c 	ldr	r1, [pc, #332]	; 8674 <intdone+0x2c>
	str r0, [r1]    
    8524:	e5810000 	str	r0, [r1]
	mov r7, #4      // Linux system call for write.
    8528:	e3a07004 	mov	r7, #4
	mov r0, #1      // fd = stdout
    852c:	e3a00001 	mov	r0, #1
	ldr r1, =char   // buf = &char
    8530:	e59f113c 	ldr	r1, [pc, #316]	; 8674 <intdone+0x2c>
	mov r2, #1      // count = 1
    8534:	e3a02001 	mov	r2, #1
	swi #0          // return write(...)
    8538:	ef000000 	svc	0x00000000
	bx lr
    853c:	e12fff1e 	bx	lr

00008540 <xt_find>:
    8540:	00008544 	andeq	r8, r0, r4, asr #10

00008544 <xt_interpret>:
    8544:	00008108 	andeq	r8, r0, r8, lsl #2

00008548 <interpret>:
    8548:	00008084 	andeq	r8, r0, r4, lsl #1
    854c:	00008330 	andeq	r8, r0, r0, lsr r3
    8550:	0000807c 	andeq	r8, r0, ip, ror r0
    8554:	00008330 	andeq	r8, r0, r0, lsr r3
    8558:	00008298 	muleq	r0, r8, r2
    855c:	00008380 	andeq	r8, r0, r0, lsl #7
    8560:	0000858c 	andeq	r8, r0, ip, lsl #11
    8564:	000080a4 	andeq	r8, r0, r4, lsr #1
    8568:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    856c:	00000032 	andeq	r0, r0, r2, lsr r0
    8570:	0000844c 	andeq	r8, r0, ip, asr #8
    8574:	00008084 	andeq	r8, r0, r4, lsl #1
    8578:	0000831c 	andeq	r8, r0, ip, lsl r3
    857c:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    8580:	00000000 	andeq	r0, r0, r0
    8584:	0000807c 	andeq	r8, r0, ip, ror r0
    8588:	0000831c 	andeq	r8, r0, ip, lsl r3

0000858c <intpar>:
    858c:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    8590:	00000020 	andeq	r0, r0, r0, lsr #32
    8594:	00008454 	andeq	r8, r0, r4, asr r4
    8598:	00008540 	andeq	r8, r0, r0, asr #10
    859c:	00008208 	andeq	r8, r0, r8, lsl #4
    85a0:	00008380 	andeq	r8, r0, r0, lsl #7
    85a4:	000085d4 	ldrdeq	r8, [r0], -r4
    85a8:	00008074 	andeq	r8, r0, r4, ror r0
    85ac:	00008330 	andeq	r8, r0, r0, lsr r3
    85b0:	00008298 	muleq	r0, r8, r2
    85b4:	00008380 	andeq	r8, r0, r0, lsl #7
    85b8:	000085c8 	andeq	r8, r0, r8, asr #11
    85bc:	000081cc 	andeq	r8, r0, ip, asr #3
    85c0:	00008370 	andeq	r8, r0, r0, ror r3
    85c4:	00008648 	andeq	r8, r0, r8, asr #12

000085c8 <intexc>:
    85c8:	0000839c 	muleq	r0, ip, r3
    85cc:	00008370 	andeq	r8, r0, r0, ror r3
    85d0:	00008648 	andeq	r8, r0, r8, asr #12

000085d4 <intnf>:
    85d4:	00008208 	andeq	r8, r0, r8, lsl #4
    85d8:	00008228 	andeq	r8, r0, r8, lsr #4
    85dc:	000083b0 			; <UNDEFINED> instruction: 0x000083b0
    85e0:	000083cc 	andeq	r8, r0, ip, asr #7
    85e4:	00008380 	andeq	r8, r0, r0, lsl #7
    85e8:	00008620 	andeq	r8, r0, r0, lsr #12
    85ec:	00008074 	andeq	r8, r0, r4, ror r0
    85f0:	00008330 	andeq	r8, r0, r0, lsr r3
    85f4:	00008380 	andeq	r8, r0, r0, lsl #7
    85f8:	0000861c 	andeq	r8, r0, ip, lsl r6
    85fc:	0000809c 	muleq	r0, ip, r0
    8600:	00008330 	andeq	r8, r0, r0, lsr r3
    8604:	00008208 	andeq	r8, r0, r8, lsl #4
    8608:	00008330 	andeq	r8, r0, r0, lsr r3
    860c:	0000809c 	muleq	r0, ip, r0
    8610:	0000831c 	andeq	r8, r0, ip, lsl r3
    8614:	0000808c 	andeq	r8, r0, ip, lsl #1
    8618:	0000831c 	andeq	r8, r0, ip, lsl r3

0000861c <intnc>:
    861c:	000080b0 	strheq	r8, [r0], -r0

00008620 <intskip>:
    8620:	000081e8 	andeq	r8, r0, r8, ror #3
    8624:	000081e8 	andeq	r8, r0, r8, ror #3
    8628:	00008074 	andeq	r8, r0, r4, ror r0
    862c:	00008330 	andeq	r8, r0, r0, lsr r3
    8630:	00008380 	andeq	r8, r0, r0, lsl #7
    8634:	00008648 	andeq	r8, r0, r8, asr #12
    8638:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    863c:	000081bc 			; <UNDEFINED> instruction: 0x000081bc
    8640:	000081cc 	andeq	r8, r0, ip, asr #3
    8644:	000081cc 	andeq	r8, r0, ip, asr #3

00008648 <intdone>:
    8648:	00008370 	andeq	r8, r0, r0, ror r3
    864c:	00008544 	andeq	r8, r0, r4, asr #10

// quit ( -- )
	define "quit", 4, , quit
	.word quit
quit:
	ldr r11, =stack_base    // Init the return stack.
    8650:	00011100 	andeq	r1, r1, r0, lsl #2
	ldr sp, =stack_base     // Init the data stack.

	ldr r1, =val_state      // Set state to 0.
    8654:	00008078 	andeq	r8, r0, r8, ror r0
	adr r0, val_num_tib      // Copy value of "#tib" to ">in".
	ldr r0, [r0]
	adr r1, val_to_in
	str r0, [r1]

	ldr r10, =xt_interpret   // Set the virtual instruction pointer to "interpret"
    8658:	00008544 	andeq	r8, r0, r4, asr #10

// (;code) ( -- )
define "(;code)", 7, , do_semi_code
	.word do_semi_code
do_semi_code:
	ldr r8, =val_last       // Set r8 to the link field address of the last dictionary word.
    865c:	000080a0 	andeq	r8, r0, r0, lsr #1
// , ( x -- )
// Comma compiles the value x to the dictionary
	define ",", 1, , comma
	.word comma
comma:
	ldr r8, =val_dp         // Set r8 to the dictionary pointer.
    8660:	00008090 	muleq	r0, r0, r0
to_number:
    //                    // r9 = length (already set)
	ldr r0, [r13], #4    // r0 = addr
	ldr r1, [r13], #4    // r1 = d.hi
	ldr r2, [r13], #4    // r2 = d.lo
	ldr r4, =val_base    // get the current number base
    8664:	00008098 	muleq	r0, r8, r0
	.word word
word:
	ldr r0, =val_dp          // load dp to use it as a scratchpad
	ldr r0, [r0]
	mov r4, r0               // save the dp to r4 for end of routine
	ldr r1, =val_tib         // load address of the input buffer
    8668:	000080a8 	andeq	r8, r0, r8, lsr #1
	ldr r1, [r1]
	mov r2, r1               // copy address to r2
	ldr r3, =val_to_in       // set r1 to tib + >in
    866c:	00008080 	andeq	r8, r0, r0, lsl #1
	ldr r3, [r3]
	add r1, r3               // r1 holds the current pointer into the input buf
	ldr r3, =val_num_tib  // set r2 to tib + #tib
    8670:	00008088 	andeq	r8, r0, r8, lsl #1

// Headerless routine to get a character into r0 from the terminal.
getchar:
	mov r7, #3      // linux system call for read(...)
	mov r0, #0      // fd = stdin
	ldr r1, =char   // buf = &char
    8674:	00011280 	andeq	r1, r1, r0, lsl #5

Disassembly of section .rodata:

00008678 <name_state>:
    8678:	00000000 	andeq	r0, r0, r0
    867c:	61747305 	cmnvs	r4, r5, lsl #6
    8680:	00006574 	andeq	r6, r0, r4, ror r5
	...

0000869c <name_to_in>:
    869c:	00008678 	andeq	r8, r0, r8, ror r6
    86a0:	6e693e03 	cdpvs	14, 6, cr3, cr9, cr3, {0}
	...

000086c0 <name_num_tib>:
    86c0:	0000869c 	muleq	r0, ip, r6
    86c4:	69742304 	ldmdbvs	r4!, {r2, r8, r9, sp}^
    86c8:	00000062 	andeq	r0, r0, r2, rrx
	...

000086e4 <name_dp>:
    86e4:	000086c0 	andeq	r8, r0, r0, asr #13
    86e8:	00706402 	rsbseq	r6, r0, r2, lsl #8
	...

00008708 <name_base>:
    8708:	000086e4 	andeq	r8, r0, r4, ror #13
    870c:	73616204 	cmnvc	r1, #4, 4	; 0x40000000
    8710:	00000065 	andeq	r0, r0, r5, rrx
	...

0000872c <name_last>:
    872c:	00008708 	andeq	r8, r0, r8, lsl #14
    8730:	73616c04 	cmnvc	r1, #4, 24	; 0x400
    8734:	00000074 	andeq	r0, r0, r4, ror r0
	...

00008750 <name_tib>:
    8750:	0000872c 	andeq	r8, r0, ip, lsr #14
    8754:	62697403 	rsbvs	r7, r9, #50331648	; 0x3000000
	...

00008774 <name_quit>:
    8774:	00008750 	andeq	r8, r0, r0, asr r7
    8778:	69757104 	ldmdbvs	r5!, {r2, r8, ip, sp, lr}^
    877c:	00000074 	andeq	r0, r0, r4, ror r0
	...

00008798 <name_colon>:
    8798:	00008774 	andeq	r8, r0, r4, ror r7
    879c:	00003a81 	andeq	r3, r0, r1, lsl #21
	...

000087bc <name_semicolon>:
    87bc:	00008798 	muleq	r0, r8, r7
    87c0:	00003b81 	andeq	r3, r0, r1, lsl #23
	...

000087e0 <name_create>:
    87e0:	000087bc 			; <UNDEFINED> instruction: 0x000087bc
    87e4:	65726306 	ldrbvs	r6, [r2, #-774]!	; 0x306
    87e8:	00657461 	rsbeq	r7, r5, r1, ror #8
	...

00008804 <name_do_semi_code>:
    8804:	000087e0 	andeq	r8, r0, r0, ror #15
    8808:	633b2807 	teqvs	fp, #458752	; 0x70000
    880c:	2965646f 	stmdbcs	r5!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
	...

00008828 <name_const>:
    8828:	00008804 	andeq	r8, r0, r4, lsl #16
    882c:	6e6f6305 	cdpvs	3, 6, cr6, cr15, cr5, {0}
    8830:	00007473 	andeq	r7, r0, r3, ror r4
	...

0000884c <name_lit>:
    884c:	00008828 	andeq	r8, r0, r8, lsr #16
    8850:	74696c83 	strbtvc	r6, [r9], #-3203	; 0xc83
	...

00008870 <name_comma>:
    8870:	0000884c 	andeq	r8, r0, ip, asr #16
    8874:	00002c01 	andeq	r2, r0, r1, lsl #24
	...

00008894 <name_drop>:
    8894:	00008870 	andeq	r8, r0, r0, ror r8
    8898:	6f726404 	svcvs	0x00726404
    889c:	00000070 	andeq	r0, r0, r0, ror r0
	...

000088b8 <name_swap>:
    88b8:	00008894 	muleq	r0, r4, r8
    88bc:	61777304 	cmnvs	r7, r4, lsl #6
    88c0:	00000070 	andeq	r0, r0, r0, ror r0
	...

000088dc <name_dup>:
    88dc:	000088b8 			; <UNDEFINED> instruction: 0x000088b8
    88e0:	70756403 	rsbsvc	r6, r5, r3, lsl #8
	...

00008900 <name_over>:
    8900:	000088dc 	ldrdeq	r8, [r0], -ip
    8904:	65766f04 	ldrbvs	r6, [r6, #-3844]!	; 0xf04
    8908:	00000072 	andeq	r0, r0, r2, ror r0
	...

00008924 <name_rot>:
    8924:	00008900 	andeq	r8, r0, r0, lsl #18
    8928:	746f7203 	strbtvc	r7, [pc], #-515	; 8930 <name_rot+0xc>
	...

00008948 <name_to_r>:
    8948:	00008924 	andeq	r8, r0, r4, lsr #18
    894c:	00523e02 	subseq	r3, r2, r2, lsl #28
	...

0000896c <name_r_from>:
    896c:	00008948 	andeq	r8, r0, r8, asr #18
    8970:	003e5202 	eorseq	r5, lr, r2, lsl #4
	...

00008990 <name_add>:
    8990:	0000896c 	andeq	r8, r0, ip, ror #18
    8994:	00002b01 	andeq	r2, r0, r1, lsl #22
	...

000089b4 <name_sub>:
    89b4:	00008990 	muleq	r0, r0, r9
    89b8:	00002d01 	andeq	r2, r0, r1, lsl #26
	...

000089d8 <name_multiply>:
    89d8:	000089b4 			; <UNDEFINED> instruction: 0x000089b4
    89dc:	00002a01 	andeq	r2, r0, r1, lsl #20
	...

000089fc <name_equal>:
    89fc:	000089d8 	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8a00:	00003d01 	andeq	r3, r0, r1, lsl #26
	...

00008a20 <name_lt>:
    8a20:	000089fc 	strdeq	r8, [r0], -ip
    8a24:	00003c01 	andeq	r3, r0, r1, lsl #24
	...

00008a44 <name_gt>:
    8a44:	00008a20 	andeq	r8, r0, r0, lsr #20
    8a48:	00003e01 	andeq	r3, r0, r1, lsl #28
	...

00008a68 <name_and>:
    8a68:	00008a44 	andeq	r8, r0, r4, asr #20
    8a6c:	00002601 	andeq	r2, r0, r1, lsl #12
	...

00008a8c <name_or>:
    8a8c:	00008a68 	andeq	r8, r0, r8, ror #20
    8a90:	00007c01 	andeq	r7, r0, r1, lsl #24
	...

00008ab0 <name_xor>:
    8ab0:	00008a8c 	andeq	r8, r0, ip, lsl #21
    8ab4:	00005e01 	andeq	r5, r0, r1, lsl #28
	...

00008ad4 <name_invert>:
    8ad4:	00008ab0 			; <UNDEFINED> instruction: 0x00008ab0
    8ad8:	766e6906 	strbtvc	r6, [lr], -r6, lsl #18
    8adc:	00747265 	rsbseq	r7, r4, r5, ror #4
	...

00008af8 <name_store>:
    8af8:	00008ad4 	ldrdeq	r8, [r0], -r4
    8afc:	00002101 	andeq	r2, r0, r1, lsl #2
	...

00008b1c <name_fetch>:
    8b1c:	00008af8 	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8b20:	00004001 	andeq	r4, r0, r1
	...

00008b40 <name_cstore>:
    8b40:	00008b1c 	andeq	r8, r0, ip, lsl fp
    8b44:	00216302 	eoreq	r6, r1, r2, lsl #6
	...

00008b64 <name_cfetch>:
    8b64:	00008b40 	andeq	r8, r0, r0, asr #22
    8b68:	00406302 	subeq	r6, r0, r2, lsl #6
	...

00008b88 <name_exit>:
    8b88:	00008b64 	andeq	r8, r0, r4, ror #22
    8b8c:	69786504 	ldmdbvs	r8!, {r2, r8, sl, sp, lr}^
    8b90:	00000074 	andeq	r0, r0, r4, ror r0
	...

00008bac <name_branch>:
    8bac:	00008b88 	andeq	r8, r0, r8, lsl #23
    8bb0:	61726206 	cmnvs	r2, r6, lsl #4
    8bb4:	0068636e 	rsbeq	r6, r8, lr, ror #6
	...

00008bd0 <name_zero_branch>:
    8bd0:	00008bac 	andeq	r8, r0, ip, lsr #23
    8bd4:	72623007 	rsbvc	r3, r2, #7
    8bd8:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
	...

00008bf4 <name_exec>:
    8bf4:	00008bd0 	ldrdeq	r8, [r0], -r0
    8bf8:	65786504 	ldrbvs	r6, [r8, #-1284]!	; 0x504
    8bfc:	00000063 	andeq	r0, r0, r3, rrx
	...

00008c18 <name_count>:
    8c18:	00008bf4 	strdeq	r8, [r0], -r4
    8c1c:	756f6305 	strbvc	r6, [pc, #-773]!	; 891f <name_over+0x1f>
    8c20:	0000746e 	andeq	r7, r0, lr, ror #8
	...

00008c3c <name_to_number>:
    8c3c:	00008c18 	andeq	r8, r0, r8, lsl ip
    8c40:	756e3e07 	strbvc	r3, [lr, #-3591]!	; 0xe07
    8c44:	7265626d 	rsbvc	r6, r5, #-805306362	; 0xd0000006
	...

00008c60 <name_accept>:
    8c60:	00008c3c 	andeq	r8, r0, ip, lsr ip
    8c64:	63636106 	cmnvs	r3, #-2147483647	; 0x80000001
    8c68:	00747065 	rsbseq	r7, r4, r5, rrx
	...

00008c84 <name_word>:
    8c84:	00008c60 	andeq	r8, r0, r0, ror #24
    8c88:	726f7704 	rsbvc	r7, pc, #4, 14	; 0x100000
    8c8c:	00000064 	andeq	r0, r0, r4, rrx
	...

00008ca8 <name_emit>:
    8ca8:	00008c84 	andeq	r8, r0, r4, lsl #25
    8cac:	696d6504 	stmdbvs	sp!, {r2, r8, sl, sp, lr}^
    8cb0:	00000074 	andeq	r0, r0, r4, ror r0
	...

00008ccc <name_find>:
    8ccc:	00008ca8 	andeq	r8, r0, r8, lsr #25
    8cd0:	6e696604 	cdpvs	6, 6, cr6, cr9, cr4, {0}
    8cd4:	00000064 	andeq	r0, r0, r4, rrx
	...

00008cf0 <name_interpret>:
    8cf0:	00008ccc 	andeq	r8, r0, ip, asr #25
    8cf4:	746e6909 	strbtvc	r6, [lr], #-2313	; 0x909
    8cf8:	72707265 	rsbsvc	r7, r0, #1342177286	; 0x50000006
    8cfc:	00007465 	andeq	r7, r0, r5, ror #8
	...

Disassembly of section .data:

00011000 <stack_base-0x100>:
	...

00011100 <stack_base>:
	...

00011200 <addr_tib>:
	...

00011280 <char>:
   11280:	00000020 	andeq	r0, r0, r0, lsr #32

00011281 <dictionary>:
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00001541 	andeq	r1, r0, r1, asr #10
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	0000000b 	andeq	r0, r0, fp
  10:	01080206 	tsteq	r8, r6, lsl #4
  14:	Address 0x00000014 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	00008074 	andeq	r8, r0, r4, ror r0
  14:	00000604 	andeq	r0, r0, r4, lsl #12
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000003c 	andeq	r0, r0, ip, lsr r0
   4:	00000002 	andeq	r0, r0, r2
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000000 	andeq	r0, r0, r0
  10:	00008074 	andeq	r8, r0, r4, ror r0
  14:	00008678 	andeq	r8, r0, r8, ror r6
  18:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
  1c:	2f00732e 	svccs	0x0000732e
  20:	2f746e6d 	svccs	0x00746e6d
  24:	796d2f66 	stmdbvc	sp!, {r1, r2, r5, r6, r8, r9, sl, fp, sp}^
  28:	726f665f 	rsbvc	r6, pc, #99614720	; 0x5f00000
  2c:	47006874 	smlsdxmi	r0, r4, r8, r6
  30:	4120554e 	teqmi	r0, lr, asr #10
  34:	2e322053 	mrccs	0, 1, r2, cr2, cr3, {2}
  38:	352e3432 	strcc	r3, [lr, #-1074]!	; 0x432
  3c:	80010031 	andhi	r0, r1, r1, lsr r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <__end__+0x1ef190>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000142 	andeq	r0, r0, r2, asr #2
   4:	001d0002 	andseq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	00010000 	andeq	r0, r1, r0
  1c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
  20:	0000732e 	andeq	r7, r0, lr, lsr #6
  24:	00000000 	andeq	r0, r0, r0
  28:	80ac0205 	adchi	r0, ip, r5, lsl #4
  2c:	e8030000 	stmda	r3, {}	; <UNPREDICTABLE>
  30:	2f500100 	svccs	0x00500100
  34:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  38:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  3c:	2f2f362f 	svccs	0x002f362f
  40:	2ff21303 	svccs	0x00f21303
  44:	0222032f 	eoreq	r0, r2, #-1140850688	; 0xbc000000
  48:	2f2f013a 	svccs	0x002f013a
  4c:	032f502f 	teqeq	pc, #47	; 0x2f
  50:	2f2f9e12 	svccs	0x002f9e12
  54:	2f4a0b03 	svccs	0x004a0b03
  58:	2f2f512f 	svccs	0x002f512f
  5c:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
  60:	512f4a0b 	teqpl	pc, fp, lsl #20
  64:	512f2f2f 	teqpl	pc, pc, lsr #30
  68:	2f2f512f 	svccs	0x002f512f
  6c:	2f2f512f 	svccs	0x002f512f
  70:	512f2f2f 	teqpl	pc, pc, lsr #30
  74:	2f512f2f 	svccs	0x00512f2f
  78:	4a0b032f 	bmi	2c0d3c <__end__+0x2af2b8>
  7c:	2f512f2f 	svccs	0x00512f2f
  80:	2f2f512f 	svccs	0x002f512f
  84:	2f2f512f 	svccs	0x002f512f
  88:	2f512f2f 	svccs	0x00512f2f
  8c:	512f2f2f 	teqpl	pc, pc, lsr #30
  90:	2f2f2f2f 	svccs	0x002f2f2f
  94:	512f2f51 	teqpl	pc, r1, asr pc	; <UNPREDICTABLE>
  98:	2f512f2f 	svccs	0x00512f2f
  9c:	032f512f 	teqeq	pc, #-1073741813	; 0xc000000b
  a0:	2f2f4a0b 	svccs	0x002f4a0b
  a4:	512f512f 	teqpl	pc, pc, lsr #2
  a8:	512f2f2f 	teqpl	pc, pc, lsr #30
  ac:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
  b0:	512f4a0b 	teqpl	pc, fp, lsl #20
  b4:	2f512f2f 	svccs	0x00512f2f
  b8:	2f2f2f2f 	svccs	0x002f2f2f
  bc:	2f2f2f51 	svccs	0x002f2f51
  c0:	2f4a0b03 	svccs	0x004a0b03
  c4:	2f2f2f2f 	svccs	0x002f2f2f
  c8:	2f2f2f52 	svccs	0x002f2f52
  cc:	2f2f302f 	svccs	0x002f302f
  d0:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  d4:	2f2f2f2f 	svccs	0x002f2f2f
  d8:	2f2f2f30 	svccs	0x002f2f30
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
  e4:	032f2f30 	teqeq	pc, #48, 30	; 0xc0
  e8:	2f514a0d 	svccs	0x00514a0d
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f302f2f 	svccs	0x00302f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	2f2f2f30 	svccs	0x002f2f30
 100:	2f2f2f2f 	svccs	0x002f2f2f
 104:	2f2f2f30 	svccs	0x002f2f30
 108:	2f2f2f2f 	svccs	0x002f2f2f
 10c:	512f2f2f 	teqpl	pc, pc, lsr #30
 110:	322f2f2f 	eorcc	r2, pc, #47, 30	; 0xbc
 114:	2f2f2f2f 	svccs	0x002f2f2f
 118:	2f322f2f 	svccs	0x00322f2f
 11c:	2f2f2f2f 	svccs	0x002f2f2f
 120:	032f2f2f 	teqeq	pc, #47, 30	; 0xbc
 124:	8a027be6 	bhi	9f0c4 <__end__+0x8d640>
 128:	03310101 	teqeq	r1, #1073741824	; 0x40000000
 12c:	cb032e09 	blgt	cb958 <__end__+0xb9ed4>
 130:	29032e00 	stmdbcs	r3, {r9, sl, fp, sp}
 134:	029f032e 	addseq	r0, pc, #-1207959552	; 0xb8000000
 138:	2e37032e 	cdpcs	3, 3, cr0, cr7, cr14, {1}
 13c:	2e033131 	mcrcs	1, 0, r3, cr3, cr1, {1}
 140:	0002022e 	andeq	r0, r2, lr, lsr #4
 144:	Address 0x00000144 is out of bounds.

