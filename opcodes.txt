Character codes explanation
# ( -- n ) create a base-36 number using characters until a space is reached
+ ( n n -- n ) add two numbers
- ( n1 n2 -- n ) subtract n1 from n2
* ( n n -- n ) multiply two numbers
/ ( n1 n2 -- n ) divide n2 by n1
% ( n1 n2 -- n ) modulo n2 by n1
0 ( -- 0 ) push zero
1 ( -- 1 ) push one
~ ( n -- n ) bitwise invert a number
& ( n n -- n ) bitwise and two numbers
| ( n n -- n ) bitwise or two numbers
^ ( n n -- n ) bitwise xor two numbers
@ ( a -- n ) fetch number at address
! ( n a -- ) store number to address
f ( a -- b ) fetch byte at address
$ ( b a -- ) store byte to address
` ( n n -- ) duplicate number
x ( n1 n2 -- n2 n1 ) swap two numbers
_ ( n -- ) drop a number
= ( n n -- f ) test if two numbers are equal
> ( n1 n2 -- f ) test if n1 is greater than n2
< ( n1 n2 -- f ) test if n1 is smaller than n2
o ( n1 n2 -- n1 n2 n1) duplicate n1 over n2
M ( n a1 a2 -- ) copy n bytes from address at a2 to address at a1
k ( -- n ) get a key from input
e ( n -- ) emit a key to output
? ( n -- n n )|( 0 -- 0 ) duplicate n unless it's zero
R ( -- R0 ) get the base value for the return stack
r ( -- ) get the next character code and do different things with the return stack based on the code:
r! ( a -- ) set the return stack pointer to a
r@ ( -- a ) get the address of the return stack pointer
r< ( n -- ) push a value to the return stack
r> ( -- n ) get a value from the return stack
S ( -- S0 ) get the base value for the data stack
s ( -- ) get the next character code and do different things with the data stack based on the code:
s! ( a -- ) set the data stack pointer to point to address a
s@ ( -- a ) get the address of the data stack pointer

